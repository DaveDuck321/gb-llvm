; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
; RUN: llc -mtriple=gb -verify-machineinstrs -O3 < %s \
; RUN:   | FileCheck %s -check-prefix=GBI-O3


define void @store_i8(ptr %a) {
; GBI-O3-LABEL: store_i8:
; GBI-O3:       # %bb.0:
; GBI-O3-NEXT:    ld a, $02
; GBI-O3-NEXT:    ld (bc), a
; GBI-O3-NEXT:    ret
    store atomic i8 2, ptr %a release, align 1
    ret void
}

define i8 @load_i8(ptr %a) {
; GBI-O3-LABEL: load_i8:
; GBI-O3:       # %bb.0:
; GBI-O3-NEXT:    ld a, (bc)
; GBI-O3-NEXT:    ret
    %res = load atomic i8, ptr %a acquire, align 1
    ret i8 %res
}

define void @atomic_dec(ptr %a) {
; GBI-O3-LABEL: atomic_dec:
; GBI-O3:       # %bb.0:
; GBI-O3-NEXT:    ld h, b
; GBI-O3-NEXT:    ld l, c
; GBI-O3-NEXT:    dec (hl)
; GBI-O3-NEXT:    ret
  %res = atomicrmw sub ptr %a, i8 1 monotonic, align 1
  ret void
}

define i8 @atomic_fetch_dec(ptr %a) {
; GBI-O3-LABEL: atomic_fetch_dec:
; GBI-O3:       # %bb.0:
; GBI-O3-NEXT:    ld d, $01
; GBI-O3-NEXT:    call __sync_fetch_and_sub_1
; GBI-O3-NEXT:    ret
  %res = atomicrmw sub ptr %a, i8 1 monotonic, align 1
  ret i8 %res
}

define void @atomic_inc(ptr %a) {
; GBI-O3-LABEL: atomic_inc:
; GBI-O3:       # %bb.0:
; GBI-O3-NEXT:    ld h, b
; GBI-O3-NEXT:    ld l, c
; GBI-O3-NEXT:    inc (hl)
; GBI-O3-NEXT:    ret
  %res = atomicrmw add ptr %a, i8 1 monotonic, align 1
  ret void
}

define void @atomic_add(ptr %a) {
; GBI-O3-LABEL: atomic_add:
; GBI-O3:       # %bb.0:
; GBI-O3-NEXT:    ld d, $02
; GBI-O3-NEXT:    call __sync_fetch_and_add_1
; GBI-O3-NEXT:    ret
  %res = atomicrmw add ptr %a, i8 2 monotonic, align 1
  ret void
}

define i8 @atomic_fetch_inc(ptr %a) {
; GBI-O3-LABEL: atomic_fetch_inc:
; GBI-O3:       # %bb.0:
; GBI-O3-NEXT:    ld d, $01
; GBI-O3-NEXT:    call __sync_fetch_and_add_1
; GBI-O3-NEXT:    ret
  %res = atomicrmw add ptr %a, i8 1 monotonic, align 1
  ret i8 %res
}

define i1 @cmpxchg_i8(ptr %a, i8 %expected, i8 %desired) {
; GBI-O3-LABEL: cmpxchg_i8:
; GBI-O3:       # %bb.0:
; GBI-O3-NEXT:    add sp, -2
; GBI-O3-NEXT:    ld hl, sp, 1
; GBI-O3-NEXT:    ld (hl), d
; GBI-O3-NEXT:    call __sync_val_compare_and_swap_1
; GBI-O3-NEXT:    ld hl, sp, 1
; GBI-O3-NEXT:    ld b, (hl)
; GBI-O3-NEXT:    sub b
; GBI-O3-NEXT:    cp $01
; GBI-O3-NEXT:    rla
; GBI-O3-NEXT:    add sp, 2
; GBI-O3-NEXT:    ret
    %res = cmpxchg ptr %a, i8 %expected, i8 %desired seq_cst seq_cst
    %loaded = extractvalue { i8, i1 } %res, 0
    %success = extractvalue { i8, i1 } %res, 1
    ret i1 %success
}

define i8 @atomic_swap(ptr %a, i8 %val) {
; GBI-O3-LABEL: atomic_swap:
; GBI-O3:       # %bb.0:
; GBI-O3-NEXT:    call __sync_lock_test_and_set_1
; GBI-O3-NEXT:    ret
  %res = atomicrmw xchg ptr %a, i8 %val monotonic, align 1
  ret i8 %res
}

define i8 @atomic_and(ptr %a, i8 %val) {
; GBI-O3-LABEL: atomic_and:
; GBI-O3:       # %bb.0:
; GBI-O3-NEXT:    call __sync_fetch_and_and_1
; GBI-O3-NEXT:    ret
  %res = atomicrmw and ptr %a, i8 %val monotonic, align 1
  ret i8 %res
}

define i8 @atomic_nand(ptr %a, i8 %val) {
; GBI-O3-LABEL: atomic_nand:
; GBI-O3:       # %bb.0:
; GBI-O3-NEXT:    call __sync_fetch_and_nand_1
; GBI-O3-NEXT:    ret
  %res = atomicrmw nand ptr %a, i8 %val monotonic, align 1
  ret i8 %res
}

define i8 @atomic_or(ptr %a, i8 %val) {
; GBI-O3-LABEL: atomic_or:
; GBI-O3:       # %bb.0:
; GBI-O3-NEXT:    call __sync_fetch_and_or_1
; GBI-O3-NEXT:    ret
  %res = atomicrmw or ptr %a, i8 %val monotonic, align 1
  ret i8 %res
}

define i8 @atomic_xor(ptr %a, i8 %val) {
; GBI-O3-LABEL: atomic_xor:
; GBI-O3:       # %bb.0:
; GBI-O3-NEXT:    call __sync_fetch_and_xor_1
; GBI-O3-NEXT:    ret
  %res = atomicrmw xor ptr %a, i8 %val monotonic, align 1
  ret i8 %res
}

define i8 @atomic_max(ptr %a, i8 %val) {
; GBI-O3-LABEL: atomic_max:
; GBI-O3:       # %bb.0:
; GBI-O3-NEXT:    call __sync_fetch_and_max_1
; GBI-O3-NEXT:    ret
  %res = atomicrmw max ptr %a, i8 %val monotonic, align 1
  ret i8 %res
}

define i8 @atomic_min(ptr %a, i8 %val) {
; GBI-O3-LABEL: atomic_min:
; GBI-O3:       # %bb.0:
; GBI-O3-NEXT:    call __sync_fetch_and_min_1
; GBI-O3-NEXT:    ret
  %res = atomicrmw min ptr %a, i8 %val monotonic, align 1
  ret i8 %res
}

define i8 @atomic_umax(ptr %a, i8 %val) {
; GBI-O3-LABEL: atomic_umax:
; GBI-O3:       # %bb.0:
; GBI-O3-NEXT:    call __sync_fetch_and_umax_1
; GBI-O3-NEXT:    ret
  %res = atomicrmw umax ptr %a, i8 %val monotonic, align 1
  ret i8 %res
}

define i8 @atomic_umin(ptr %a, i8 %val) {
; GBI-O3-LABEL: atomic_umin:
; GBI-O3:       # %bb.0:
; GBI-O3-NEXT:    call __sync_fetch_and_umin_1
; GBI-O3-NEXT:    ret
  %res = atomicrmw umin ptr %a, i8 %val monotonic, align 1
  ret i8 %res
}

define void @fence() {
; GBI-O3-LABEL: fence:
; GBI-O3:       # %bb.0:
; GBI-O3-NEXT:    #APP
; GBI-O3-NEXT:    #NO_APP
; GBI-O3-NEXT:    ret
    fence seq_cst
    ret void
}

define void @atomic_set(ptr %a) {
; GBI-O3-LABEL: atomic_set:
; GBI-O3:       # %bb.0:
; GBI-O3-NEXT:    ld h, b
; GBI-O3-NEXT:    ld l, c
; GBI-O3-NEXT:    set 1, (hl)
; GBI-O3-NEXT:    ret
  %res = atomicrmw or ptr %a, i8 2 monotonic, align 1
  ret void
}

define void @atomic_set_libcall(ptr %a) {
; GBI-O3-LABEL: atomic_set_libcall:
; GBI-O3:       # %bb.0:
; GBI-O3-NEXT:    ld d, $03
; GBI-O3-NEXT:    call __sync_fetch_and_or_1
; GBI-O3-NEXT:    ret
  %res = atomicrmw or ptr %a, i8 3 monotonic, align 1
  ret void
}

define void @atomic_reset(ptr %a) {
; GBI-O3-LABEL: atomic_reset:
; GBI-O3:       # %bb.0:
; GBI-O3-NEXT:    ld h, b
; GBI-O3-NEXT:    ld l, c
; GBI-O3-NEXT:    res 5, (hl)
; GBI-O3-NEXT:    ret
  %res = atomicrmw and ptr %a, i8 223 monotonic, align 1
  ret void
}

define void @atomic_reset_libcall(ptr %a) {
; GBI-O3-LABEL: atomic_reset_libcall:
; GBI-O3:       # %bb.0:
; GBI-O3-NEXT:    ld d, $5f
; GBI-O3-NEXT:    call __sync_fetch_and_and_1
; GBI-O3-NEXT:    ret
  %res = atomicrmw and ptr %a, i8 95 monotonic, align 1
  ret void
}
