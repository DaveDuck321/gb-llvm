; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 4
%type._Z8TrueType = type {}
%type._Z9FalseType = type {}
%type._Z8EnableIfI8TrueTypeE = type {}
%type._Z5Range = type {i16, i16}
%type._Z8OverrideIsE = type {}

declare void @llvm.trap() cold nounwind noreturn

define i1 @main() {
begin:
  %0 = alloca i16, align 2
  %1 = alloca %type._Z5Range, align 2
  %2 = alloca i16, align 2
  store i16 1, ptr %0, align 2
  %3 = call %type._Z5Range @make_range(i16 0, i16 10)
  store %type._Z5Range %3, ptr %1, align 2
  %4 = call i1 @has_next(ptr %1)
  ret i1 %4
}

define i1 @has_next(ptr %0) {
begin:
  %1 = alloca ptr, align 1
  store ptr %0, ptr %1, align 1
  %2 = load ptr, ptr %1, align 1
  %3 = getelementptr inbounds %type._Z5Range, ptr %2, i32 0, i32 1
  %4 = load ptr, ptr %1, align 1
  %5 = getelementptr inbounds %type._Z5Range, ptr %4, i32 0, i32 0
  %6 = load i16, ptr %3, align 2
  %7 = load i16, ptr %5, align 2
  %8 = call i1 @is_less_than(i16 %6, i16 %7)
  ret i1 %8
}
define i1 @is_less_than(i16 %0, i16 %1) {
begin:
  %2 = alloca i16, align 2
  %3 = alloca i16, align 2
  %4 = alloca i16, align 2
  %5 = alloca i16, align 2
  store i16 %0, ptr %2, align 2
  store i16 %1, ptr %3, align 2
  %6 = load i16, ptr %2, align 2
  store i16 %6, ptr %4, align 2
  %7 = load i16, ptr %3, align 2
  store i16 %7, ptr %5, align 2
  %8 = load i16, ptr %4, align 2
  %9 = load i16, ptr %5, align 2
  %10 = icmp sgt i16 %8, %9
  ret i1 %10
}
define %type._Z5Range @make_range(i16 %0, i16 %1) {
begin:
  %2 = alloca i16, align 2
  %3 = alloca i16, align 2
  store i16 %0, ptr %2, align 2
  store i16 %1, ptr %3, align 2
  %4 = load i16, ptr %2, align 2
  %5 = load i16, ptr %3, align 2
  %6 = insertvalue %type._Z5Range undef, i16 %4, 0
  %7 = insertvalue %type._Z5Range %6, i16 %5, 1
  ret %type._Z5Range %7
}
