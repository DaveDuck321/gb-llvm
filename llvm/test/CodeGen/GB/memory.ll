; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 3
; RUN: llc -mtriple=gb -verify-machineinstrs < %s \
; RUN:   | FileCheck %s -check-prefix=GBI

define i8 @load8(ptr %a) nounwind {
; GBI-LABEL: load8:
; GBI:       ; %bb.0:
; GBI-NEXT:    ld a, (hl)
; GBI-NEXT:    ret
  %1 = load i8, ptr %a
  ret i8 %1
}

define i16 @load16(ptr %a) nounwind {
; GBI-LABEL: load16:
; GBI:       ; %bb.0:
; GBI-NEXT:    ld b, h
; GBI-NEXT:    ld c, l
; GBI-NEXT:    ld a, c
; GBI-NEXT:    add $01
; GBI-NEXT:    ld l, a
; GBI-NEXT:    ld a, b
; GBI-NEXT:    adc $00
; GBI-NEXT:    ld h, a
; GBI-NEXT:    ld d, (hl)
; GBI-NEXT:    ld h, b
; GBI-NEXT:    ld l, c
; GBI-NEXT:    ; kill: def $bc
; GBI-NEXT:    ld e, (hl)
; GBI-NEXT:    ld h, d
; GBI-NEXT:    ld l, e
; GBI-NEXT:    ; kill: def $de
; GBI-NEXT:    ret
  %1 = load i16, ptr %a
  ret i16 %1
}

define void @store8(ptr %a, i8 %b) nounwind {
; GBI-LABEL: store8:
; GBI:       ; %bb.0:
; GBI-NEXT:    ld (hl), b
; GBI-NEXT:    ret
  store i8 %b, ptr %a
  ret void
}

define void @store16(ptr %a, i16 %b) nounwind {
; GBI-LABEL: store16:
; GBI:       ; %bb.0:
; GBI-NEXT:    add sp, -2
; GBI-NEXT:    ld b, h
; GBI-NEXT:    ld c, l
; GBI-NEXT:    ld hl, sp, 4
; GBI-NEXT:    ld d, h
; GBI-NEXT:    ld a, l
; GBI-NEXT:    ld hl, sp, 0
; GBI-NEXT:    ldi (hl), a
; GBI-NEXT:    ld (hl), d
; GBI-NEXT:    ld l, a
; GBI-NEXT:    ld h, d
; GBI-NEXT:    ld a, (hl)
; GBI-NEXT:    ld h, b
; GBI-NEXT:    ld l, c
; GBI-NEXT:    ld (hl), a
; GBI-NEXT:    ld a, c
; GBI-NEXT:    add $01
; GBI-NEXT:    ld e, a
; GBI-NEXT:    ld a, b
; GBI-NEXT:    adc $00
; GBI-NEXT:    ld d, a
; GBI-NEXT:    ld hl, sp, 0
; GBI-NEXT:    ld c, (hl)
; GBI-NEXT:    inc hl
; GBI-NEXT:    ld b, (hl)
; GBI-NEXT:    ld a, c
; GBI-NEXT:    add $01
; GBI-NEXT:    ld l, a
; GBI-NEXT:    ld a, b
; GBI-NEXT:    adc $00
; GBI-NEXT:    ld h, a
; GBI-NEXT:    ld a, (hl)
; GBI-NEXT:    ld h, d
; GBI-NEXT:    ld l, e
; GBI-NEXT:    ; kill: def $de
; GBI-NEXT:    ld (hl), a
; GBI-NEXT:    add sp, 2
; GBI-NEXT:    ret
  store i16 %b, ptr %a
  ret void
}

define void @store1(ptr %a, i1 %b) nounwind {
; GBI-LABEL: store1:
; GBI:       ; %bb.0:
; GBI-NEXT:    ld a, b
; GBI-NEXT:    and $01
; GBI-NEXT:    ld (hl), a
; GBI-NEXT:    ret
  store i1 %b, ptr %a
  ret void
}

define i1 @load1(ptr %a) nounwind {
; GBI-LABEL: load1:
; GBI:       ; %bb.0:
; GBI-NEXT:    ld a, (hl)
; GBI-NEXT:    ret
  %1 = load i1, ptr %a
  ret i1 %1
}

define i8 @load_sext(ptr %a) nounwind {
; GBI-LABEL: load_sext:
; GBI:       ; %bb.0:
; GBI-NEXT:    ld a, (hl)
; GBI-NEXT:    and $01
; GBI-NEXT:    ld b, a
; GBI-NEXT:    ld a, $00
; GBI-NEXT:    sub b
; GBI-NEXT:    ret
  %1 = load i1, ptr %a
  %2 = sext i1 %1 to i8
  ret i8 %2
}

define i8 @load_zext(ptr %a) nounwind {
; GBI-LABEL: load_zext:
; GBI:       ; %bb.0:
; GBI-NEXT:    ld a, (hl)
; GBI-NEXT:    and $01
; GBI-NEXT:    ret
  %1 = load i1, ptr %a
  %2 = zext i1 %1 to i8
  ret i8 %2
}

define void @store_trunc(ptr %a, i8 %b) nounwind {
; GBI-LABEL: store_trunc:
; GBI:       ; %bb.0:
; GBI-NEXT:    ld a, b
; GBI-NEXT:    and $01
; GBI-NEXT:    ld (hl), a
; GBI-NEXT:    ret
  %1 = trunc i8 %b to i1
  store i1 %1, ptr %a, align 1
  ret void
}

define i1 @simple_stack(i1 %0) {
; GBI-LABEL: simple_stack:
; GBI:       ; %bb.0: ; %begin
; GBI-NEXT:    add sp, -2
; GBI-NEXT:    ld a, b
; GBI-NEXT:    and $01
; GBI-NEXT:    ld hl, sp, 1
; GBI-NEXT:    ld (hl), a
; GBI-NEXT:    ld a, b
; GBI-NEXT:    add sp, 2
; GBI-NEXT:    ret
begin:
  %1 = alloca i1, align 1
  store i1 %0, ptr %1, align 1
  %2 = load i1, ptr %1, align 1
  ret i1 %2
}
