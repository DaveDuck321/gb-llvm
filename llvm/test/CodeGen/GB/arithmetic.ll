; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 3
; RUN: llc -mtriple=gb -verify-machineinstrs -O3 < %s \
; RUN:   | FileCheck %s -check-prefix=GBI

define i8 @add(i8 %b, i8 %c) nounwind {
; GBI-LABEL: add:
; GBI:       ; %bb.0:
; GBI-NEXT:    ld a, b
; GBI-NEXT:    add c
; GBI-NEXT:    ret
  %1 = add i8 %b, %c
  ret i8 %1
}

define i8 @addi(i8 %b) nounwind {
; GBI-LABEL: addi:
; GBI:       ; %bb.0:
; GBI-NEXT:    ld a, b
; GBI-NEXT:    add $01
; GBI-NEXT:    ret
  %1 = add i8 %b, 1
  ret i8 %1
}

define i8 @add_hl(i8 %b, ptr %hl) nounwind {
; GBI-LABEL: add_hl:
; GBI:       ; %bb.0:
; GBI-NEXT:    ld a, b
; GBI-NEXT:    add (hl)
; GBI-NEXT:    ret
  %1 = load i8, ptr %hl
  %2 = add i8 %b, %1
  ret i8 %2
}

define i8 @sub(i8 %b, i8 %c) nounwind {
; GBI-LABEL: sub:
; GBI:       ; %bb.0:
; GBI-NEXT:    ld a, b
; GBI-NEXT:    sub c
; GBI-NEXT:    ret
  %1 = sub i8 %b, %c
  ret i8 %1
}

define i8 @subi(i8 %b) nounwind {
; GBI-LABEL: subi:
; GBI:       ; %bb.0:
; GBI-NEXT:    ld a, b
; GBI-NEXT:    add $ff
; GBI-NEXT:    ret
  %1 = sub i8 %b, 1
  ret i8 %1
}

define i8 @sub_hl(i8 %b, ptr %hl) nounwind {
; GBI-LABEL: sub_hl:
; GBI:       ; %bb.0:
; GBI-NEXT:    ld a, b
; GBI-NEXT:    sub (hl)
; GBI-NEXT:    ret
  %1 = load i8, ptr %hl
  %2 = sub i8 %b, %1
  ret i8 %2
}

define i8 @and(i8 %b, i8 %c) nounwind {
; GBI-LABEL: and:
; GBI:       ; %bb.0:
; GBI-NEXT:    ld a, b
; GBI-NEXT:    and c
; GBI-NEXT:    ret
  %1 = and i8 %b, %c
  ret i8 %1
}

define i8 @andi(i8 %b) nounwind {
; GBI-LABEL: andi:
; GBI:       ; %bb.0:
; GBI-NEXT:    ld a, b
; GBI-NEXT:    and $01
; GBI-NEXT:    ret
  %1 = and i8 %b, 1
  ret i8 %1
}

define i8 @and_hl(i8 %b, ptr %hl) nounwind {
; GBI-LABEL: and_hl:
; GBI:       ; %bb.0:
; GBI-NEXT:    ld a, b
; GBI-NEXT:    and (hl)
; GBI-NEXT:    ret
  %1 = load i8, ptr %hl
  %2 = and i8 %b, %1
  ret i8 %2
}

define i8 @xor(i8 %b, i8 %c) nounwind {
; GBI-LABEL: xor:
; GBI:       ; %bb.0:
; GBI-NEXT:    ld a, b
; GBI-NEXT:    xor c
; GBI-NEXT:    ret
  %1 = xor i8 %b, %c
  ret i8 %1
}

define i8 @xori(i8 %b) nounwind {
; GBI-LABEL: xori:
; GBI:       ; %bb.0:
; GBI-NEXT:    ld a, b
; GBI-NEXT:    xor $01
; GBI-NEXT:    ret
  %1 = xor i8 %b, 1
  ret i8 %1
}

define i8 @xor_hl(i8 %b, ptr %hl) nounwind {
; GBI-LABEL: xor_hl:
; GBI:       ; %bb.0:
; GBI-NEXT:    ld a, b
; GBI-NEXT:    xor (hl)
; GBI-NEXT:    ret
  %1 = load i8, ptr %hl
  %2 = xor i8 %b, %1
  ret i8 %2
}

define i8 @or(i8 %b, i8 %c) nounwind {
; GBI-LABEL: or:
; GBI:       ; %bb.0:
; GBI-NEXT:    ld a, b
; GBI-NEXT:    or c
; GBI-NEXT:    ret
  %1 = or i8 %b, %c
  ret i8 %1
}

define i8 @ori(i8 %b) nounwind {
; GBI-LABEL: ori:
; GBI:       ; %bb.0:
; GBI-NEXT:    ld a, b
; GBI-NEXT:    or $01
; GBI-NEXT:    ret
  %1 = or i8 %b, 1
  ret i8 %1
}

define i8 @or_hl(i8 %b, ptr %hl) nounwind {
; GBI-LABEL: or_hl:
; GBI:       ; %bb.0:
; GBI-NEXT:    ld a, b
; GBI-NEXT:    or (hl)
; GBI-NEXT:    ret
  %1 = load i8, ptr %hl
  %2 = or i8 %b, %1
  ret i8 %2
}

define i16 @add16(i16 %a) nounwind {
; GBI-LABEL: add16:
; GBI:       ; %bb.0:
; GBI-NEXT:    ld a, l
; GBI-NEXT:    add $14
; GBI-NEXT:    ld c, a
; GBI-NEXT:    ld a, h
; GBI-NEXT:    adc $00
; GBI-NEXT:    ld b, a
; GBI-NEXT:    ld h, b
; GBI-NEXT:    ld l, c
; GBI-NEXT:    ; kill: def $bc
; GBI-NEXT:    ret
  %1 = add i16 %a, 20
  ret i16 %1
}

define i1 @setcc_eq_zero(i8 %b) nounwind {
; GBI-LABEL: setcc_eq_zero:
; GBI:       ; %bb.0:
; GBI-NEXT:    ld a, b
; GBI-NEXT:    cp $01
; GBI-NEXT:    rla
; GBI-NEXT:    ret
  %1 = icmp eq i8 %b, 0
  ret i1 %1
}

define i1 @setcc_ne_zero(i8 %b) nounwind {
; GBI-LABEL: setcc_ne_zero:
; GBI:       ; %bb.0:
; GBI-NEXT:    ld a, b
; GBI-NEXT:    cp $01
; GBI-NEXT:    rla
; GBI-NEXT:    cpl
; GBI-NEXT:    ret
  %1 = icmp ne i8 %b, 0
  ret i1 %1
}

define i1 @setcc_eq(i8 %b, i8 %c) nounwind {
; GBI-LABEL: setcc_eq:
; GBI:       ; %bb.0:
; GBI-NEXT:    ld a, b
; GBI-NEXT:    sub c
; GBI-NEXT:    cp $01
; GBI-NEXT:    rla
; GBI-NEXT:    ret
  %1 = icmp eq i8 %b, %c
  ret i1 %1
}

define i1 @setcc_ne(i8 %b, i8 %c) nounwind {
; GBI-LABEL: setcc_ne:
; GBI:       ; %bb.0:
; GBI-NEXT:    ld a, b
; GBI-NEXT:    sub c
; GBI-NEXT:    cp $01
; GBI-NEXT:    rla
; GBI-NEXT:    cpl
; GBI-NEXT:    ret
  %1 = icmp ne i8 %b, %c
  ret i1 %1
}

define i1 @setcc_gt(i8 %b, i8 %c) nounwind {
; GBI-LABEL: setcc_gt:
; GBI:       ; %bb.0:
; GBI-NEXT:    ld a, c
; GBI-NEXT:    sub b
; GBI-NEXT:    rlca
; GBI-NEXT:    ret
  %1 = icmp sgt i8 %b, %c
  ret i1 %1
}

define i1 @setcc_lt(i8 %b, i8 %c) nounwind {
; GBI-LABEL: setcc_lt:
; GBI:       ; %bb.0:
; GBI-NEXT:    ld a, b
; GBI-NEXT:    sub c
; GBI-NEXT:    rlca
; GBI-NEXT:    ret
  %1 = icmp slt i8 %b, %c
  ret i1 %1
}

define i1 @setcc_le(i8 %b, i8 %c) nounwind {
; GBI-LABEL: setcc_le:
; GBI:       ; %bb.0:
; GBI-NEXT:    ld a, c
; GBI-NEXT:    sub b
; GBI-NEXT:    rlca
; GBI-NEXT:    cpl
; GBI-NEXT:    ret
  %1 = icmp sle i8 %b, %c
  ret i1 %1
}

define i1 @setcc_ge(i8 %b, i8 %c) nounwind {
; GBI-LABEL: setcc_ge:
; GBI:       ; %bb.0:
; GBI-NEXT:    ld a, b
; GBI-NEXT:    sub c
; GBI-NEXT:    rlca
; GBI-NEXT:    cpl
; GBI-NEXT:    ret
  %1 = icmp sge i8 %b, %c
  ret i1 %1
}

define i1 @setcc_ugt(i8 %b, i8 %c) nounwind {
; GBI-LABEL: setcc_ugt:
; GBI:       ; %bb.0:
; GBI-NEXT:    ld a, c
; GBI-NEXT:    cp b
; GBI-NEXT:    rla
; GBI-NEXT:    ret
  %1 = icmp ugt i8 %b, %c
  ret i1 %1
}

define i1 @setcc_ult(i8 %b, i8 %c) nounwind {
; GBI-LABEL: setcc_ult:
; GBI:       ; %bb.0:
; GBI-NEXT:    ld a, b
; GBI-NEXT:    cp c
; GBI-NEXT:    rla
; GBI-NEXT:    ret
  %1 = icmp ult i8 %b, %c
  ret i1 %1
}

define i1 @setcc_ule(i8 %b, i8 %c) nounwind {
; GBI-LABEL: setcc_ule:
; GBI:       ; %bb.0:
; GBI-NEXT:    ld a, c
; GBI-NEXT:    cp b
; GBI-NEXT:    rla
; GBI-NEXT:    cpl
; GBI-NEXT:    ret
  %1 = icmp ule i8 %b, %c
  ret i1 %1
}

define i1 @setcc_uge(i8 %b, i8 %c) nounwind {
; GBI-LABEL: setcc_uge:
; GBI:       ; %bb.0:
; GBI-NEXT:    ld a, b
; GBI-NEXT:    cp c
; GBI-NEXT:    rla
; GBI-NEXT:    cpl
; GBI-NEXT:    ret
  %1 = icmp uge i8 %b, %c
  ret i1 %1
}

define i8 @shl(i8 %b, i8 %c) nounwind {
; GBI-LABEL: shl:
; GBI:       ; %bb.0:
; GBI-NEXT:    ld a, b
; GBI-NEXT:    dec c
; GBI-NEXT:    inc c
; GBI-NEXT:    jp z, .LBB28_3
; GBI-NEXT:  .LBB28_2: ; =>This Inner Loop Header: Depth=1
; GBI-NEXT:    sla a
; GBI-NEXT:    dec c
; GBI-NEXT:    jp nz, .LBB28_2
; GBI-NEXT:  .LBB28_3:
; GBI-NEXT:    ret
  %1 = shl i8 %b, %c
  ret i8 %1
}

define i8 @lshr(i8 %b, i8 %c) nounwind {
; GBI-LABEL: lshr:
; GBI:       ; %bb.0:
; GBI-NEXT:    ld a, b
; GBI-NEXT:    dec c
; GBI-NEXT:    inc c
; GBI-NEXT:    jp z, .LBB29_3
; GBI-NEXT:  .LBB29_2: ; =>This Inner Loop Header: Depth=1
; GBI-NEXT:    srl a
; GBI-NEXT:    dec c
; GBI-NEXT:    jp nz, .LBB29_2
; GBI-NEXT:  .LBB29_3:
; GBI-NEXT:    ret
  %1 = lshr i8 %b, %c
  ret i8 %1
}

define i8 @ashr(i8 %b, i8 %c) nounwind {
; GBI-LABEL: ashr:
; GBI:       ; %bb.0:
; GBI-NEXT:    ld a, b
; GBI-NEXT:    dec c
; GBI-NEXT:    inc c
; GBI-NEXT:    jp z, .LBB30_3
; GBI-NEXT:  .LBB30_2: ; =>This Inner Loop Header: Depth=1
; GBI-NEXT:    sra a
; GBI-NEXT:    dec c
; GBI-NEXT:    jp nz, .LBB30_2
; GBI-NEXT:  .LBB30_3:
; GBI-NEXT:    ret
  %1 = ashr i8 %b, %c
  ret i8 %1
}


define i8 @shl_c(i8 %b) nounwind {
; GBI-LABEL: shl_c:
; GBI:       ; %bb.0:
; GBI-NEXT:    ld a, b
; GBI-NEXT:    ld b, $02
; GBI-NEXT:    dec b
; GBI-NEXT:    inc b
; GBI-NEXT:    jp z, .LBB31_3
; GBI-NEXT:  .LBB31_2: ; =>This Inner Loop Header: Depth=1
; GBI-NEXT:    sla a
; GBI-NEXT:    dec b
; GBI-NEXT:    jp nz, .LBB31_2
; GBI-NEXT:  .LBB31_3:
; GBI-NEXT:    ret
  %1 = shl i8 %b, 2
  ret i8 %1
}

define i8 @lshr_c(i8 %b) nounwind {
; GBI-LABEL: lshr_c:
; GBI:       ; %bb.0:
; GBI-NEXT:    ld a, b
; GBI-NEXT:    ld b, $02
; GBI-NEXT:    dec b
; GBI-NEXT:    inc b
; GBI-NEXT:    jp z, .LBB32_3
; GBI-NEXT:  .LBB32_2: ; =>This Inner Loop Header: Depth=1
; GBI-NEXT:    srl a
; GBI-NEXT:    dec b
; GBI-NEXT:    jp nz, .LBB32_2
; GBI-NEXT:  .LBB32_3:
; GBI-NEXT:    ret
  %1 = lshr i8 %b, 2
  ret i8 %1
}

define i8 @ashr_c(i8 %b) nounwind {
; GBI-LABEL: ashr_c:
; GBI:       ; %bb.0:
; GBI-NEXT:    ld a, b
; GBI-NEXT:    ld b, $02
; GBI-NEXT:    dec b
; GBI-NEXT:    inc b
; GBI-NEXT:    jp z, .LBB33_3
; GBI-NEXT:  .LBB33_2: ; =>This Inner Loop Header: Depth=1
; GBI-NEXT:    sra a
; GBI-NEXT:    dec b
; GBI-NEXT:    jp nz, .LBB33_2
; GBI-NEXT:  .LBB33_3:
; GBI-NEXT:    ret
  %1 = ashr i8 %b, 2
  ret i8 %1
}

define i8 @mul(i8 %b, i8 %c) {
; GBI-LABEL: mul:
; GBI:       ; %bb.0:
; GBI-NEXT:    call __mulqi3
; GBI-NEXT:    ret
  %1 = mul i8 %b, %c
  ret i8 %1
}

declare i16 @llvm.bswap.i16(i16)
define i16 @byte_swap(i16 %hl) {
; GBI-LABEL: byte_swap:
; GBI:       ; %bb.0:
; GBI-NEXT:    ld c, h
; GBI-NEXT:    ld b, l
; GBI-NEXT:    ld h, b
; GBI-NEXT:    ld l, c
; GBI-NEXT:    ; kill: def $bc
; GBI-NEXT:    ret
  %1 = call i16 @llvm.bswap.i16(i16 %hl)
  ret i16 %1
}

declare i8 @llvm.ctpop.i8(i8)
define i8 @ctpop(i8 %b) {
; GBI-LABEL: ctpop:
; GBI:       ; %bb.0:
; GBI-NEXT:    ld c, $01
; GBI-NEXT:    dec c
; GBI-NEXT:    inc c
; GBI-NEXT:    ld a, b
; GBI-NEXT:    jp z, .LBB36_3
; GBI-NEXT:  ; %bb.1:
; GBI-NEXT:    ld a, b
; GBI-NEXT:  .LBB36_2: ; =>This Inner Loop Header: Depth=1
; GBI-NEXT:    srl a
; GBI-NEXT:    dec c
; GBI-NEXT:    jp nz, .LBB36_2
; GBI-NEXT:  .LBB36_3:
; GBI-NEXT:    ld d, $02
; GBI-NEXT:    and $55
; GBI-NEXT:    ld c, a
; GBI-NEXT:    ld a, b
; GBI-NEXT:    sub c
; GBI-NEXT:    dec d
; GBI-NEXT:    inc d
; GBI-NEXT:    ld b, a
; GBI-NEXT:    jp z, .LBB36_6
; GBI-NEXT:  ; %bb.4:
; GBI-NEXT:    ld b, a
; GBI-NEXT:  .LBB36_5: ; =>This Inner Loop Header: Depth=1
; GBI-NEXT:    srl b
; GBI-NEXT:    dec d
; GBI-NEXT:    jp nz, .LBB36_5
; GBI-NEXT:  .LBB36_6:
; GBI-NEXT:    ld d, $04
; GBI-NEXT:    and $33
; GBI-NEXT:    ld c, a
; GBI-NEXT:    ld a, b
; GBI-NEXT:    and $33
; GBI-NEXT:    ld b, a
; GBI-NEXT:    ld a, c
; GBI-NEXT:    add b
; GBI-NEXT:    dec d
; GBI-NEXT:    inc d
; GBI-NEXT:    ld b, a
; GBI-NEXT:    jp z, .LBB36_9
; GBI-NEXT:  ; %bb.7:
; GBI-NEXT:    ld b, a
; GBI-NEXT:  .LBB36_8: ; =>This Inner Loop Header: Depth=1
; GBI-NEXT:    srl b
; GBI-NEXT:    dec d
; GBI-NEXT:    jp nz, .LBB36_8
; GBI-NEXT:  .LBB36_9:
; GBI-NEXT:    add b
; GBI-NEXT:    and $0f
; GBI-NEXT:    ret
  %1 = call i8 @llvm.ctpop.i8(i8 %b)
  ret i8 %1
}

declare i8 @llvm.cttz.i8(i8)
define i8 @cttz(i8 %b) {
; GBI-LABEL: cttz:
; GBI:       ; %bb.0:
; GBI-NEXT:    ld a, b
; GBI-NEXT:    cp $00
; GBI-NEXT:    jp z, .LBB37_1
; GBI-NEXT:  ; %bb.2: ; %cond.false
; GBI-NEXT:    ld d, $01
; GBI-NEXT:    ld a, b
; GBI-NEXT:    cpl
; GBI-NEXT:    ld c, a
; GBI-NEXT:    ld a, b
; GBI-NEXT:    add $ff
; GBI-NEXT:    ld b, a
; GBI-NEXT:    ld a, c
; GBI-NEXT:    and b
; GBI-NEXT:    ld b, a
; GBI-NEXT:    dec d
; GBI-NEXT:    inc d
; GBI-NEXT:    jp z, .LBB37_5
; GBI-NEXT:  ; %bb.3:
; GBI-NEXT:    ld a, b
; GBI-NEXT:  .LBB37_4: ; %cond.false
; GBI-NEXT:    ; =>This Inner Loop Header: Depth=1
; GBI-NEXT:    srl a
; GBI-NEXT:    dec d
; GBI-NEXT:    jp nz, .LBB37_4
; GBI-NEXT:  .LBB37_5: ; %cond.false
; GBI-NEXT:    ld d, $02
; GBI-NEXT:    and $55
; GBI-NEXT:    ld c, a
; GBI-NEXT:    ld a, b
; GBI-NEXT:    sub c
; GBI-NEXT:    dec d
; GBI-NEXT:    inc d
; GBI-NEXT:    ld b, a
; GBI-NEXT:    jp z, .LBB37_8
; GBI-NEXT:  ; %bb.6:
; GBI-NEXT:    ld b, a
; GBI-NEXT:  .LBB37_7: ; %cond.false
; GBI-NEXT:    ; =>This Inner Loop Header: Depth=1
; GBI-NEXT:    srl b
; GBI-NEXT:    dec d
; GBI-NEXT:    jp nz, .LBB37_7
; GBI-NEXT:  .LBB37_8: ; %cond.false
; GBI-NEXT:    ld d, $04
; GBI-NEXT:    and $33
; GBI-NEXT:    ld c, a
; GBI-NEXT:    ld a, b
; GBI-NEXT:    and $33
; GBI-NEXT:    ld b, a
; GBI-NEXT:    ld a, c
; GBI-NEXT:    add b
; GBI-NEXT:    dec d
; GBI-NEXT:    inc d
; GBI-NEXT:    ld b, a
; GBI-NEXT:    jp z, .LBB37_11
; GBI-NEXT:  ; %bb.9:
; GBI-NEXT:    ld b, a
; GBI-NEXT:  .LBB37_10: ; %cond.false
; GBI-NEXT:    ; =>This Inner Loop Header: Depth=1
; GBI-NEXT:    srl b
; GBI-NEXT:    dec d
; GBI-NEXT:    jp nz, .LBB37_10
; GBI-NEXT:  .LBB37_11: ; %cond.false
; GBI-NEXT:    add b
; GBI-NEXT:    and $0f
; GBI-NEXT:    ret
; GBI-NEXT:  .LBB37_1:
; GBI-NEXT:    ld a, $08
; GBI-NEXT:    ret
  %1 = call i8 @llvm.cttz.i8(i8 %b)
  ret i8 %1
}

declare i8 @llvm.ctlz.i8(i8)
define i8 @ctlz(i8 %b) {
; GBI-LABEL: ctlz:
; GBI:       ; %bb.0:
; GBI-NEXT:    ld a, b
; GBI-NEXT:    cp $00
; GBI-NEXT:    jp z, .LBB38_1
; GBI-NEXT:  ; %bb.2: ; %cond.false
; GBI-NEXT:    ld c, $01
; GBI-NEXT:    dec c
; GBI-NEXT:    ld d, c
; GBI-NEXT:    inc d
; GBI-NEXT:    ld b, a
; GBI-NEXT:    jp z, .LBB38_5
; GBI-NEXT:  ; %bb.3:
; GBI-NEXT:    ld b, a
; GBI-NEXT:  .LBB38_4: ; %cond.false
; GBI-NEXT:    ; =>This Inner Loop Header: Depth=1
; GBI-NEXT:    srl b
; GBI-NEXT:    dec d
; GBI-NEXT:    jp nz, .LBB38_4
; GBI-NEXT:  .LBB38_5: ; %cond.false
; GBI-NEXT:    ld e, $02
; GBI-NEXT:    or b
; GBI-NEXT:    dec e
; GBI-NEXT:    ld d, e
; GBI-NEXT:    inc d
; GBI-NEXT:    ld b, a
; GBI-NEXT:    jp z, .LBB38_8
; GBI-NEXT:  ; %bb.6:
; GBI-NEXT:    ld b, a
; GBI-NEXT:  .LBB38_7: ; %cond.false
; GBI-NEXT:    ; =>This Inner Loop Header: Depth=1
; GBI-NEXT:    srl b
; GBI-NEXT:    dec d
; GBI-NEXT:    jp nz, .LBB38_7
; GBI-NEXT:  .LBB38_8: ; %cond.false
; GBI-NEXT:    ld d, $04
; GBI-NEXT:    or b
; GBI-NEXT:    dec d
; GBI-NEXT:    ld b, d
; GBI-NEXT:    inc b
; GBI-NEXT:    ld h, a
; GBI-NEXT:    jp z, .LBB38_11
; GBI-NEXT:  ; %bb.9:
; GBI-NEXT:    ld h, a
; GBI-NEXT:  .LBB38_10: ; %cond.false
; GBI-NEXT:    ; =>This Inner Loop Header: Depth=1
; GBI-NEXT:    srl h
; GBI-NEXT:    dec b
; GBI-NEXT:    jp nz, .LBB38_10
; GBI-NEXT:  .LBB38_11: ; %cond.false
; GBI-NEXT:    or h
; GBI-NEXT:    cpl
; GBI-NEXT:    ld b, a
; GBI-NEXT:    inc c
; GBI-NEXT:    jp z, .LBB38_14
; GBI-NEXT:  ; %bb.12:
; GBI-NEXT:    ld a, b
; GBI-NEXT:  .LBB38_13: ; %cond.false
; GBI-NEXT:    ; =>This Inner Loop Header: Depth=1
; GBI-NEXT:    srl a
; GBI-NEXT:    dec c
; GBI-NEXT:    jp nz, .LBB38_13
; GBI-NEXT:  .LBB38_14: ; %cond.false
; GBI-NEXT:    and $55
; GBI-NEXT:    ld c, a
; GBI-NEXT:    ld a, b
; GBI-NEXT:    sub c
; GBI-NEXT:    inc e
; GBI-NEXT:    ld b, a
; GBI-NEXT:    jp z, .LBB38_17
; GBI-NEXT:  ; %bb.15:
; GBI-NEXT:    ld b, a
; GBI-NEXT:  .LBB38_16: ; %cond.false
; GBI-NEXT:    ; =>This Inner Loop Header: Depth=1
; GBI-NEXT:    srl b
; GBI-NEXT:    dec e
; GBI-NEXT:    jp nz, .LBB38_16
; GBI-NEXT:  .LBB38_17: ; %cond.false
; GBI-NEXT:    and $33
; GBI-NEXT:    ld c, a
; GBI-NEXT:    ld a, b
; GBI-NEXT:    and $33
; GBI-NEXT:    ld b, a
; GBI-NEXT:    ld a, c
; GBI-NEXT:    add b
; GBI-NEXT:    inc d
; GBI-NEXT:    ld b, a
; GBI-NEXT:    jp z, .LBB38_20
; GBI-NEXT:  ; %bb.18:
; GBI-NEXT:    ld b, a
; GBI-NEXT:  .LBB38_19: ; %cond.false
; GBI-NEXT:    ; =>This Inner Loop Header: Depth=1
; GBI-NEXT:    srl b
; GBI-NEXT:    dec d
; GBI-NEXT:    jp nz, .LBB38_19
; GBI-NEXT:  .LBB38_20: ; %cond.false
; GBI-NEXT:    add b
; GBI-NEXT:    and $0f
; GBI-NEXT:    ret
; GBI-NEXT:  .LBB38_1:
; GBI-NEXT:    ld a, $08
; GBI-NEXT:    ret
  %1 = call i8 @llvm.ctlz.i8(i8 %b)
  ret i8 %1
}
