; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 3
; RUN: llc -mtriple=gb -verify-machineinstrs -O3 < %s \
; RUN:   | FileCheck %s -check-prefix=GBI

define i8 @add(i8 %b, i8 %c) nounwind {
; GBI-LABEL: add:
; GBI:       # %bb.0:
; GBI-NEXT:    ld a, b
; GBI-NEXT:    add c
; GBI-NEXT:    ret
  %1 = add i8 %b, %c
  ret i8 %1
}

define i8 @addi(i8 %b) nounwind {
; GBI-LABEL: addi:
; GBI:       # %bb.0:
; GBI-NEXT:    ld a, b
; GBI-NEXT:    add $02
; GBI-NEXT:    ret
  %1 = add i8 %b, 2
  ret i8 %1
}


define i8 @inc(i8 %b) nounwind {
; GBI-LABEL: inc:
; GBI:       # %bb.0:
; GBI-NEXT:    ld a, b
; GBI-NEXT:    inc a
; GBI-NEXT:    ret
  %1 = add i8 %b, 1
  ret i8 %1
}

define fastcc i8 @add_hl(i8 %b, ptr %hl) nounwind {
; GBI-LABEL: add_hl:
; GBI:       # %bb.0:
; GBI-NEXT:    ld a, b
; GBI-NEXT:    add (hl)
; GBI-NEXT:    ret
  %1 = load i8, ptr %hl
  %2 = add i8 %b, %1
  ret i8 %2
}

define i8 @sub(i8 %b, i8 %c) nounwind {
; GBI-LABEL: sub:
; GBI:       # %bb.0:
; GBI-NEXT:    ld a, b
; GBI-NEXT:    sub c
; GBI-NEXT:    ret
  %1 = sub i8 %b, %c
  ret i8 %1
}

define i8 @subi(i8 %b) nounwind {
; GBI-LABEL: subi:
; GBI:       # %bb.0:
; GBI-NEXT:    ld a, b
; GBI-NEXT:    add $fe
; GBI-NEXT:    ret
  %1 = sub i8 %b, 2
  ret i8 %1
}

define i8 @dec(i8 %b) nounwind {
; GBI-LABEL: dec:
; GBI:       # %bb.0:
; GBI-NEXT:    ld a, b
; GBI-NEXT:    dec a
; GBI-NEXT:    ret
  %1 = sub i8 %b, 1
  ret i8 %1
}

define fastcc i8 @sub_hl(i8 %b, ptr %hl) nounwind {
; GBI-LABEL: sub_hl:
; GBI:       # %bb.0:
; GBI-NEXT:    ld a, b
; GBI-NEXT:    sub (hl)
; GBI-NEXT:    ret
  %1 = load i8, ptr %hl
  %2 = sub i8 %b, %1
  ret i8 %2
}

define i8 @and(i8 %b, i8 %c) nounwind {
; GBI-LABEL: and:
; GBI:       # %bb.0:
; GBI-NEXT:    ld a, b
; GBI-NEXT:    and c
; GBI-NEXT:    ret
  %1 = and i8 %b, %c
  ret i8 %1
}

define i8 @andi(i8 %b) nounwind {
; GBI-LABEL: andi:
; GBI:       # %bb.0:
; GBI-NEXT:    ld a, b
; GBI-NEXT:    and $01
; GBI-NEXT:    ret
  %1 = and i8 %b, 1
  ret i8 %1
}

define fastcc i8 @and_hl(i8 %b, ptr %hl) nounwind {
; GBI-LABEL: and_hl:
; GBI:       # %bb.0:
; GBI-NEXT:    ld a, b
; GBI-NEXT:    and (hl)
; GBI-NEXT:    ret
  %1 = load i8, ptr %hl
  %2 = and i8 %b, %1
  ret i8 %2
}

define i8 @xor(i8 %b, i8 %c) nounwind {
; GBI-LABEL: xor:
; GBI:       # %bb.0:
; GBI-NEXT:    ld a, b
; GBI-NEXT:    xor c
; GBI-NEXT:    ret
  %1 = xor i8 %b, %c
  ret i8 %1
}

define i8 @xori(i8 %b) nounwind {
; GBI-LABEL: xori:
; GBI:       # %bb.0:
; GBI-NEXT:    ld a, b
; GBI-NEXT:    xor $01
; GBI-NEXT:    ret
  %1 = xor i8 %b, 1
  ret i8 %1
}

define fastcc i8 @xor_hl(i8 %b, ptr %hl) nounwind {
; GBI-LABEL: xor_hl:
; GBI:       # %bb.0:
; GBI-NEXT:    ld a, b
; GBI-NEXT:    xor (hl)
; GBI-NEXT:    ret
  %1 = load i8, ptr %hl
  %2 = xor i8 %b, %1
  ret i8 %2
}

define i8 @or(i8 %b, i8 %c) nounwind {
; GBI-LABEL: or:
; GBI:       # %bb.0:
; GBI-NEXT:    ld a, b
; GBI-NEXT:    or c
; GBI-NEXT:    ret
  %1 = or i8 %b, %c
  ret i8 %1
}

define i8 @ori(i8 %b) nounwind {
; GBI-LABEL: ori:
; GBI:       # %bb.0:
; GBI-NEXT:    ld a, b
; GBI-NEXT:    or $01
; GBI-NEXT:    ret
  %1 = or i8 %b, 1
  ret i8 %1
}

define fastcc i8 @or_hl(i8 %b, ptr %hl) nounwind {
; GBI-LABEL: or_hl:
; GBI:       # %bb.0:
; GBI-NEXT:    ld a, b
; GBI-NEXT:    or (hl)
; GBI-NEXT:    ret
  %1 = load i8, ptr %hl
  %2 = or i8 %b, %1
  ret i8 %2
}

define fastcc i16 @add16(i16 %a) nounwind {
; GBI-LABEL: add16:
; GBI:       # %bb.0:
; GBI-NEXT:    ld a, l
; GBI-NEXT:    add $14
; GBI-NEXT:    ld l, a
; GBI-NEXT:    ld a, h
; GBI-NEXT:    adc $00
; GBI-NEXT:    ld h, a
; GBI-NEXT:    ret
  %1 = add i16 %a, 20
  ret i16 %1
}

define i1 @setcc_eq_zero(i8 %b) nounwind {
; GBI-LABEL: setcc_eq_zero:
; GBI:       # %bb.0:
; GBI-NEXT:    ld a, b
; GBI-NEXT:    cp $01
; GBI-NEXT:    rla
; GBI-NEXT:    ret
  %1 = icmp eq i8 %b, 0
  ret i1 %1
}

define i1 @setcc_ne_zero(i8 %b) nounwind {
; GBI-LABEL: setcc_ne_zero:
; GBI:       # %bb.0:
; GBI-NEXT:    ld a, b
; GBI-NEXT:    cp $01
; GBI-NEXT:    rla
; GBI-NEXT:    cpl
; GBI-NEXT:    ret
  %1 = icmp ne i8 %b, 0
  ret i1 %1
}

define i1 @setcc_eq(i8 %b, i8 %c) nounwind {
; GBI-LABEL: setcc_eq:
; GBI:       # %bb.0:
; GBI-NEXT:    ld a, b
; GBI-NEXT:    sub c
; GBI-NEXT:    cp $01
; GBI-NEXT:    rla
; GBI-NEXT:    ret
  %1 = icmp eq i8 %b, %c
  ret i1 %1
}

define i1 @setcc_ne(i8 %b, i8 %c) nounwind {
; GBI-LABEL: setcc_ne:
; GBI:       # %bb.0:
; GBI-NEXT:    ld a, b
; GBI-NEXT:    sub c
; GBI-NEXT:    cp $01
; GBI-NEXT:    rla
; GBI-NEXT:    cpl
; GBI-NEXT:    ret
  %1 = icmp ne i8 %b, %c
  ret i1 %1
}

define i1 @setcc_gt(i8 %b, i8 %c) nounwind {
; GBI-LABEL: setcc_gt:
; GBI:       # %bb.0:
; GBI-NEXT:    ld a, c
; GBI-NEXT:    sub b
; GBI-NEXT:    ld d, a
; GBI-NEXT:    ld a, c
; GBI-NEXT:    xor b
; GBI-NEXT:    bit 7, a
; GBI-NEXT:    jr nz, .LBB22_2
; GBI-NEXT:  # %bb.1:
; GBI-NEXT:    rlc d
; GBI-NEXT:    ld a, d
; GBI-NEXT:    ret
; GBI-NEXT:  .LBB22_2:
; GBI-NEXT:    rlc c
; GBI-NEXT:    ld a, c
; GBI-NEXT:    ret
  %1 = icmp sgt i8 %b, %c
  ret i1 %1
}

define i1 @setcc_lt(i8 %b, i8 %c) nounwind {
; GBI-LABEL: setcc_lt:
; GBI:       # %bb.0:
; GBI-NEXT:    ld a, b
; GBI-NEXT:    sub c
; GBI-NEXT:    ld d, a
; GBI-NEXT:    ld a, b
; GBI-NEXT:    xor c
; GBI-NEXT:    bit 7, a
; GBI-NEXT:    jr nz, .LBB23_2
; GBI-NEXT:  # %bb.1:
; GBI-NEXT:    rlc d
; GBI-NEXT:    ld a, d
; GBI-NEXT:    ret
; GBI-NEXT:  .LBB23_2:
; GBI-NEXT:    rlc b
; GBI-NEXT:    ld a, b
; GBI-NEXT:    ret
  %1 = icmp slt i8 %b, %c
  ret i1 %1
}

define i1 @setcc_le(i8 %b, i8 %c) nounwind {
; GBI-LABEL: setcc_le:
; GBI:       # %bb.0:
; GBI-NEXT:    ld a, c
; GBI-NEXT:    sub b
; GBI-NEXT:    ld d, a
; GBI-NEXT:    ld a, c
; GBI-NEXT:    xor b
; GBI-NEXT:    bit 7, a
; GBI-NEXT:    jr nz, .LBB24_2
; GBI-NEXT:  # %bb.1:
; GBI-NEXT:    rlc d
; GBI-NEXT:    ld c, d
; GBI-NEXT:    ld a, c
; GBI-NEXT:    cpl
; GBI-NEXT:    ret
; GBI-NEXT:  .LBB24_2:
; GBI-NEXT:    rlc c
; GBI-NEXT:    ld a, c
; GBI-NEXT:    cpl
; GBI-NEXT:    ret
  %1 = icmp sle i8 %b, %c
  ret i1 %1
}

define i1 @setcc_ge(i8 %b, i8 %c) nounwind {
; GBI-LABEL: setcc_ge:
; GBI:       # %bb.0:
; GBI-NEXT:    ld a, b
; GBI-NEXT:    sub c
; GBI-NEXT:    ld d, a
; GBI-NEXT:    ld a, b
; GBI-NEXT:    xor c
; GBI-NEXT:    bit 7, a
; GBI-NEXT:    jr nz, .LBB25_2
; GBI-NEXT:  # %bb.1:
; GBI-NEXT:    rlc d
; GBI-NEXT:    ld b, d
; GBI-NEXT:    ld a, b
; GBI-NEXT:    cpl
; GBI-NEXT:    ret
; GBI-NEXT:  .LBB25_2:
; GBI-NEXT:    rlc b
; GBI-NEXT:    ld a, b
; GBI-NEXT:    cpl
; GBI-NEXT:    ret
  %1 = icmp sge i8 %b, %c
  ret i1 %1
}

define i1 @setcc_ugt(i8 %b, i8 %c) nounwind {
; GBI-LABEL: setcc_ugt:
; GBI:       # %bb.0:
; GBI-NEXT:    ld a, c
; GBI-NEXT:    cp b
; GBI-NEXT:    rla
; GBI-NEXT:    ret
  %1 = icmp ugt i8 %b, %c
  ret i1 %1
}

define i1 @setcc_ult(i8 %b, i8 %c) nounwind {
; GBI-LABEL: setcc_ult:
; GBI:       # %bb.0:
; GBI-NEXT:    ld a, b
; GBI-NEXT:    cp c
; GBI-NEXT:    rla
; GBI-NEXT:    ret
  %1 = icmp ult i8 %b, %c
  ret i1 %1
}

define i1 @setcc_ule(i8 %b, i8 %c) nounwind {
; GBI-LABEL: setcc_ule:
; GBI:       # %bb.0:
; GBI-NEXT:    ld a, c
; GBI-NEXT:    cp b
; GBI-NEXT:    rla
; GBI-NEXT:    cpl
; GBI-NEXT:    ret
  %1 = icmp ule i8 %b, %c
  ret i1 %1
}

define i1 @setcc_uge(i8 %b, i8 %c) nounwind {
; GBI-LABEL: setcc_uge:
; GBI:       # %bb.0:
; GBI-NEXT:    ld a, b
; GBI-NEXT:    cp c
; GBI-NEXT:    rla
; GBI-NEXT:    cpl
; GBI-NEXT:    ret
  %1 = icmp uge i8 %b, %c
  ret i1 %1
}

define i8 @shl(i8 %b, i8 %c) nounwind {
; GBI-LABEL: shl:
; GBI:       # %bb.0:
; GBI-NEXT:    ld a, b
; GBI-NEXT:    dec c
; GBI-NEXT:    inc c
; GBI-NEXT:    jr z, .LBB30_2
; GBI-NEXT:  .LBB30_1: # =>This Inner Loop Header: Depth=1
; GBI-NEXT:    sla a
; GBI-NEXT:    dec c
; GBI-NEXT:    jr nz, .LBB30_1
; GBI-NEXT:  .LBB30_2:
; GBI-NEXT:    ret
  %1 = shl i8 %b, %c
  ret i8 %1
}

define i8 @lshr(i8 %b, i8 %c) nounwind {
; GBI-LABEL: lshr:
; GBI:       # %bb.0:
; GBI-NEXT:    ld a, b
; GBI-NEXT:    dec c
; GBI-NEXT:    inc c
; GBI-NEXT:    jr z, .LBB31_2
; GBI-NEXT:  .LBB31_1: # =>This Inner Loop Header: Depth=1
; GBI-NEXT:    srl a
; GBI-NEXT:    dec c
; GBI-NEXT:    jr nz, .LBB31_1
; GBI-NEXT:  .LBB31_2:
; GBI-NEXT:    ret
  %1 = lshr i8 %b, %c
  ret i8 %1
}

define i8 @ashr(i8 %b, i8 %c) nounwind {
; GBI-LABEL: ashr:
; GBI:       # %bb.0:
; GBI-NEXT:    ld a, b
; GBI-NEXT:    dec c
; GBI-NEXT:    inc c
; GBI-NEXT:    jr z, .LBB32_2
; GBI-NEXT:  .LBB32_1: # =>This Inner Loop Header: Depth=1
; GBI-NEXT:    sra a
; GBI-NEXT:    dec c
; GBI-NEXT:    jr nz, .LBB32_1
; GBI-NEXT:  .LBB32_2:
; GBI-NEXT:    ret
  %1 = ashr i8 %b, %c
  ret i8 %1
}


define i8 @shl_c(i8 %b) nounwind {
; GBI-LABEL: shl_c:
; GBI:       # %bb.0:
; GBI-NEXT:    ld a, b
; GBI-NEXT:    sla a
; GBI-NEXT:    sla a
; GBI-NEXT:    ret
  %1 = shl i8 %b, 2
  ret i8 %1
}

define i8 @lshr_c(i8 %b) nounwind {
; GBI-LABEL: lshr_c:
; GBI:       # %bb.0:
; GBI-NEXT:    ld a, b
; GBI-NEXT:    srl a
; GBI-NEXT:    srl a
; GBI-NEXT:    ret
  %1 = lshr i8 %b, 2
  ret i8 %1
}

define i8 @ashr_c(i8 %b) nounwind {
; GBI-LABEL: ashr_c:
; GBI:       # %bb.0:
; GBI-NEXT:    ld a, b
; GBI-NEXT:    sra a
; GBI-NEXT:    sra a
; GBI-NEXT:    ret
  %1 = ashr i8 %b, 2
  ret i8 %1
}

define i8 @mul(i8 %b, i8 %c) {
; GBI-LABEL: mul:
; GBI:       # %bb.0:
; GBI-NEXT:    call __mulqi3
; GBI-NEXT:    ret
  %1 = mul i8 %b, %c
  ret i8 %1
}

declare i16 @llvm.bswap.i16(i16)
define fastcc i16 @byte_swap(i16 %hl) {
; GBI-LABEL: byte_swap:
; GBI:       # %bb.0:
; GBI-NEXT:    ld c, h
; GBI-NEXT:    ld h, l
; GBI-NEXT:    ld l, c
; GBI-NEXT:    ret
  %1 = call i16 @llvm.bswap.i16(i16 %hl)
  ret i16 %1
}

declare i8 @llvm.ctpop.i8(i8)
define i8 @ctpop(i8 %b) {
; GBI-LABEL: ctpop:
; GBI:       # %bb.0:
; GBI-NEXT:    ld a, b
; GBI-NEXT:    srl a
; GBI-NEXT:    and $55
; GBI-NEXT:    ld c, a
; GBI-NEXT:    ld a, b
; GBI-NEXT:    sub c
; GBI-NEXT:    ld b, a
; GBI-NEXT:    srl b
; GBI-NEXT:    srl b
; GBI-NEXT:    and $33
; GBI-NEXT:    ld c, a
; GBI-NEXT:    ld a, b
; GBI-NEXT:    and $33
; GBI-NEXT:    ld b, a
; GBI-NEXT:    ld a, c
; GBI-NEXT:    add b
; GBI-NEXT:    ld b, a
; GBI-NEXT:    swap a
; GBI-NEXT:    and $0f
; GBI-NEXT:    ld c, a
; GBI-NEXT:    ld a, b
; GBI-NEXT:    add c
; GBI-NEXT:    and $0f
; GBI-NEXT:    ret
  %1 = call i8 @llvm.ctpop.i8(i8 %b)
  ret i8 %1
}

declare i8 @llvm.cttz.i8(i8)
define i8 @cttz(i8 %b) {
; GBI-LABEL: cttz:
; GBI:       # %bb.0:
; GBI-NEXT:    ld a, b
; GBI-NEXT:    or a
; GBI-NEXT:    jr z, .LBB39_2
; GBI-NEXT:  # %bb.1: # %cond.false
; GBI-NEXT:    ld b, a
; GBI-NEXT:    dec b
; GBI-NEXT:    cpl
; GBI-NEXT:    and b
; GBI-NEXT:    ld b, a
; GBI-NEXT:    srl a
; GBI-NEXT:    and $55
; GBI-NEXT:    ld c, a
; GBI-NEXT:    ld a, b
; GBI-NEXT:    sub c
; GBI-NEXT:    ld b, a
; GBI-NEXT:    srl b
; GBI-NEXT:    srl b
; GBI-NEXT:    and $33
; GBI-NEXT:    ld c, a
; GBI-NEXT:    ld a, b
; GBI-NEXT:    and $33
; GBI-NEXT:    ld b, a
; GBI-NEXT:    ld a, c
; GBI-NEXT:    add b
; GBI-NEXT:    ld b, a
; GBI-NEXT:    swap a
; GBI-NEXT:    and $0f
; GBI-NEXT:    ld c, a
; GBI-NEXT:    ld a, b
; GBI-NEXT:    add c
; GBI-NEXT:    and $0f
; GBI-NEXT:    ret
; GBI-NEXT:  .LBB39_2:
; GBI-NEXT:    ld a, $08
; GBI-NEXT:    ret
  %1 = call i8 @llvm.cttz.i8(i8 %b)
  ret i8 %1
}

declare i8 @llvm.ctlz.i8(i8)
define i8 @ctlz(i8 %b) {
; GBI-LABEL: ctlz:
; GBI:       # %bb.0:
; GBI-NEXT:    ld a, b
; GBI-NEXT:    or a
; GBI-NEXT:    jr z, .LBB40_2
; GBI-NEXT:  # %bb.1: # %cond.false
; GBI-NEXT:    ld b, a
; GBI-NEXT:    srl b
; GBI-NEXT:    or b
; GBI-NEXT:    ld b, a
; GBI-NEXT:    srl b
; GBI-NEXT:    srl b
; GBI-NEXT:    or b
; GBI-NEXT:    ld b, a
; GBI-NEXT:    swap a
; GBI-NEXT:    and $0f
; GBI-NEXT:    ld c, a
; GBI-NEXT:    ld a, b
; GBI-NEXT:    or c
; GBI-NEXT:    cpl
; GBI-NEXT:    ld b, a
; GBI-NEXT:    srl a
; GBI-NEXT:    and $55
; GBI-NEXT:    ld c, a
; GBI-NEXT:    ld a, b
; GBI-NEXT:    sub c
; GBI-NEXT:    ld b, a
; GBI-NEXT:    srl b
; GBI-NEXT:    srl b
; GBI-NEXT:    and $33
; GBI-NEXT:    ld c, a
; GBI-NEXT:    ld a, b
; GBI-NEXT:    and $33
; GBI-NEXT:    ld b, a
; GBI-NEXT:    ld a, c
; GBI-NEXT:    add b
; GBI-NEXT:    ld b, a
; GBI-NEXT:    swap a
; GBI-NEXT:    and $0f
; GBI-NEXT:    ld c, a
; GBI-NEXT:    ld a, b
; GBI-NEXT:    add c
; GBI-NEXT:    and $0f
; GBI-NEXT:    ret
; GBI-NEXT:  .LBB40_2:
; GBI-NEXT:    ld a, $08
; GBI-NEXT:    ret
  %1 = call i8 @llvm.ctlz.i8(i8 %b)
  ret i8 %1
}


define i8 @shl_1(i8 %b) nounwind {
; GBI-LABEL: shl_1:
; GBI:       # %bb.0:
; GBI-NEXT:    ld a, b
; GBI-NEXT:    sla a
; GBI-NEXT:    ret
  %1 = shl i8 %b, 1
  ret i8 %1
}

define i8 @shl_2(i8 %b) nounwind {
; GBI-LABEL: shl_2:
; GBI:       # %bb.0:
; GBI-NEXT:    ld a, b
; GBI-NEXT:    sla a
; GBI-NEXT:    sla a
; GBI-NEXT:    ret
  %1 = shl i8 %b, 2
  ret i8 %1
}

define i8 @shl_3(i8 %b) nounwind {
; GBI-LABEL: shl_3:
; GBI:       # %bb.0:
; GBI-NEXT:    ld a, b
; GBI-NEXT:    sla a
; GBI-NEXT:    sla a
; GBI-NEXT:    sla a
; GBI-NEXT:    ret
  %1 = shl i8 %b, 3
  ret i8 %1
}

define i8 @shl_4(i8 %b) nounwind {
; GBI-LABEL: shl_4:
; GBI:       # %bb.0:
; GBI-NEXT:    ld a, b
; GBI-NEXT:    swap a
; GBI-NEXT:    and $f0
; GBI-NEXT:    ret
  %1 = shl i8 %b, 4
  ret i8 %1
}

define i8 @shl_5(i8 %b) nounwind {
; GBI-LABEL: shl_5:
; GBI:       # %bb.0:
; GBI-NEXT:    ld a, b
; GBI-NEXT:    swap a
; GBI-NEXT:    rlca
; GBI-NEXT:    and $e0
; GBI-NEXT:    ret
  %1 = shl i8 %b, 5
  ret i8 %1
}

define i8 @shl_6(i8 %b) nounwind {
; GBI-LABEL: shl_6:
; GBI:       # %bb.0:
; GBI-NEXT:    ld a, b
; GBI-NEXT:    rrca
; GBI-NEXT:    rrca
; GBI-NEXT:    and $c0
; GBI-NEXT:    ret
  %1 = shl i8 %b, 6
  ret i8 %1
}

define i8 @shl_7(i8 %b) nounwind {
; GBI-LABEL: shl_7:
; GBI:       # %bb.0:
; GBI-NEXT:    ld a, b
; GBI-NEXT:    rrca
; GBI-NEXT:    and $80
; GBI-NEXT:    ret
  %1 = shl i8 %b, 7
  ret i8 %1
}

define i8 @lshr_1(i8 %b) nounwind {
; GBI-LABEL: lshr_1:
; GBI:       # %bb.0:
; GBI-NEXT:    ld a, b
; GBI-NEXT:    srl a
; GBI-NEXT:    ret
  %1 = lshr i8 %b, 1
  ret i8 %1
}

define i8 @lshr_2(i8 %b) nounwind {
; GBI-LABEL: lshr_2:
; GBI:       # %bb.0:
; GBI-NEXT:    ld a, b
; GBI-NEXT:    srl a
; GBI-NEXT:    srl a
; GBI-NEXT:    ret
  %1 = lshr i8 %b, 2
  ret i8 %1
}

define i8 @lshr_3(i8 %b) nounwind {
; GBI-LABEL: lshr_3:
; GBI:       # %bb.0:
; GBI-NEXT:    ld a, b
; GBI-NEXT:    srl a
; GBI-NEXT:    srl a
; GBI-NEXT:    srl a
; GBI-NEXT:    ret
  %1 = lshr i8 %b, 3
  ret i8 %1
}

define i8 @lshr_4(i8 %b) nounwind {
; GBI-LABEL: lshr_4:
; GBI:       # %bb.0:
; GBI-NEXT:    ld a, b
; GBI-NEXT:    swap a
; GBI-NEXT:    and $0f
; GBI-NEXT:    ret
  %1 = lshr i8 %b, 4
  ret i8 %1
}

define i8 @lshr_5(i8 %b) nounwind {
; GBI-LABEL: lshr_5:
; GBI:       # %bb.0:
; GBI-NEXT:    ld a, b
; GBI-NEXT:    swap a
; GBI-NEXT:    rrca
; GBI-NEXT:    and $07
; GBI-NEXT:    ret
  %1 = lshr i8 %b, 5
  ret i8 %1
}

define i8 @lshr_6(i8 %b) nounwind {
; GBI-LABEL: lshr_6:
; GBI:       # %bb.0:
; GBI-NEXT:    ld a, b
; GBI-NEXT:    rlca
; GBI-NEXT:    rlca
; GBI-NEXT:    and $03
; GBI-NEXT:    ret
  %1 = lshr i8 %b, 6
  ret i8 %1
}

define i8 @lshr_7(i8 %b) nounwind {
; GBI-LABEL: lshr_7:
; GBI:       # %bb.0:
; GBI-NEXT:    ld a, b
; GBI-NEXT:    rlca
; GBI-NEXT:    and $01
; GBI-NEXT:    ret
  %1 = lshr i8 %b, 7
  ret i8 %1
}

define fastcc i16 @sub_2(i16 %hl) nounwind {
; GBI-LABEL: sub_2:
; GBI:       # %bb.0:
; GBI-NEXT:    dec hl
; GBI-NEXT:    dec hl
; GBI-NEXT:    ret
  %1 = sub i16 %hl, 2
  ret i16 %1
}
