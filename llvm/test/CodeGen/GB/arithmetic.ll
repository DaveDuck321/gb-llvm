; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 3
; RUN: llc -mtriple=gb -verify-machineinstrs < %s \
; RUN:   | FileCheck %s -check-prefix=GBI

define i8 @add(i8 %b, i8 %c) nounwind {
; GBI-LABEL: add:
; GBI:       ; %bb.0:
; GBI-NEXT:    ld a, b
; GBI-NEXT:    add c
; GBI-NEXT:    ret
  %1 = add i8 %b, %c
  ret i8 %1
}

define i8 @addi(i8 %b) nounwind {
; GBI-LABEL: addi:
; GBI:       ; %bb.0:
; GBI-NEXT:    ld a, b
; GBI-NEXT:    add $01
; GBI-NEXT:    ret
  %1 = add i8 %b, 1
  ret i8 %1
}

define i8 @add_hl(i8 %b, ptr %hl) nounwind {
; GBI-LABEL: add_hl:
; GBI:       ; %bb.0:
; GBI-NEXT:    ld a, b
; GBI-NEXT:    add (hl)
; GBI-NEXT:    ret
  %1 = load i8, ptr %hl
  %2 = add i8 %b, %1
  ret i8 %2
}

define i8 @sub(i8 %b, i8 %c) nounwind {
; GBI-LABEL: sub:
; GBI:       ; %bb.0:
; GBI-NEXT:    ld a, b
; GBI-NEXT:    sub c
; GBI-NEXT:    ret
  %1 = sub i8 %b, %c
  ret i8 %1
}

define i8 @subi(i8 %b) nounwind {
; GBI-LABEL: subi:
; GBI:       ; %bb.0:
; GBI-NEXT:    ld a, b
; GBI-NEXT:    add $ff
; GBI-NEXT:    ret
  %1 = sub i8 %b, 1
  ret i8 %1
}

define i8 @sub_hl(i8 %b, ptr %hl) nounwind {
; GBI-LABEL: sub_hl:
; GBI:       ; %bb.0:
; GBI-NEXT:    ld a, b
; GBI-NEXT:    sub (hl)
; GBI-NEXT:    ret
  %1 = load i8, ptr %hl
  %2 = sub i8 %b, %1
  ret i8 %2
}

define i8 @and(i8 %b, i8 %c) nounwind {
; GBI-LABEL: and:
; GBI:       ; %bb.0:
; GBI-NEXT:    ld a, b
; GBI-NEXT:    and c
; GBI-NEXT:    ret
  %1 = and i8 %b, %c
  ret i8 %1
}

define i8 @andi(i8 %b) nounwind {
; GBI-LABEL: andi:
; GBI:       ; %bb.0:
; GBI-NEXT:    ld a, b
; GBI-NEXT:    and $01
; GBI-NEXT:    ret
  %1 = and i8 %b, 1
  ret i8 %1
}

define i8 @and_hl(i8 %b, ptr %hl) nounwind {
; GBI-LABEL: and_hl:
; GBI:       ; %bb.0:
; GBI-NEXT:    ld a, b
; GBI-NEXT:    and (hl)
; GBI-NEXT:    ret
  %1 = load i8, ptr %hl
  %2 = and i8 %b, %1
  ret i8 %2
}

define i8 @xor(i8 %b, i8 %c) nounwind {
; GBI-LABEL: xor:
; GBI:       ; %bb.0:
; GBI-NEXT:    ld a, b
; GBI-NEXT:    xor c
; GBI-NEXT:    ret
  %1 = xor i8 %b, %c
  ret i8 %1
}

define i8 @xori(i8 %b) nounwind {
; GBI-LABEL: xori:
; GBI:       ; %bb.0:
; GBI-NEXT:    ld a, b
; GBI-NEXT:    xor $01
; GBI-NEXT:    ret
  %1 = xor i8 %b, 1
  ret i8 %1
}

define i8 @xor_hl(i8 %b, ptr %hl) nounwind {
; GBI-LABEL: xor_hl:
; GBI:       ; %bb.0:
; GBI-NEXT:    ld a, b
; GBI-NEXT:    xor (hl)
; GBI-NEXT:    ret
  %1 = load i8, ptr %hl
  %2 = xor i8 %b, %1
  ret i8 %2
}

define i8 @or(i8 %b, i8 %c) nounwind {
; GBI-LABEL: or:
; GBI:       ; %bb.0:
; GBI-NEXT:    ld a, b
; GBI-NEXT:    or c
; GBI-NEXT:    ret
  %1 = or i8 %b, %c
  ret i8 %1
}

define i8 @ori(i8 %b) nounwind {
; GBI-LABEL: ori:
; GBI:       ; %bb.0:
; GBI-NEXT:    ld a, b
; GBI-NEXT:    or $01
; GBI-NEXT:    ret
  %1 = or i8 %b, 1
  ret i8 %1
}

define i8 @or_hl(i8 %b, ptr %hl) nounwind {
; GBI-LABEL: or_hl:
; GBI:       ; %bb.0:
; GBI-NEXT:    ld a, b
; GBI-NEXT:    or (hl)
; GBI-NEXT:    ret
  %1 = load i8, ptr %hl
  %2 = or i8 %b, %1
  ret i8 %2
}

define i16 @add16(i16 %a) nounwind {
; GBI-LABEL: add16:
; GBI:       ; %bb.0:
; GBI-NEXT:    ld bc, $0014
; GBI-NEXT:    add hl, bc
; GBI-NEXT:    ret
  %1 = add i16 %a, 20
  ret i16 %1
}
