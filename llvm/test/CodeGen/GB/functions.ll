; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 3
; RUN: llc -mtriple=gb -verify-machineinstrs -O0 < %s \
; RUN:   | FileCheck %s -check-prefix=GBI-O0
; RUN: llc -mtriple=gb -verify-machineinstrs -O3 < %s \
; RUN:   | FileCheck %s -check-prefix=GBI-O3

define i8 @argument2(i8 %0, i8 %1, i8 %2, i8 %3) nounwind {
; GBI-O0-LABEL: argument2:
; GBI-O0:       ; %bb.0:
; GBI-O0-NEXT:    ld hl, sp, 4
; GBI-O0-NEXT:    ld a, (hl)
; GBI-O0-NEXT:    ret
;
; GBI-O3-LABEL: argument2:
; GBI-O3:       ; %bb.0:
; GBI-O3-NEXT:    ld hl, sp, 4
; GBI-O3-NEXT:    ld a, (hl)
; GBI-O3-NEXT:    ret
  ret i8 %3
}

define i8 @argument3(i8 %0, i8 %1, i8 %2, i8 %3) nounwind {
; GBI-O0-LABEL: argument3:
; GBI-O0:       ; %bb.0:
; GBI-O0-NEXT:    ld hl, sp, 4
; GBI-O0-NEXT:    ld a, (hl)
; GBI-O0-NEXT:    ret
;
; GBI-O3-LABEL: argument3:
; GBI-O3:       ; %bb.0:
; GBI-O3-NEXT:    ld hl, sp, 4
; GBI-O3-NEXT:    ld a, (hl)
; GBI-O3-NEXT:    ret
  ret i8 %3
}

define i8 @call_argument2() nounwind {
; GBI-O0-LABEL: call_argument2:
; GBI-O0:       ; %bb.0:
; GBI-O0-NEXT:    add sp, -2
; GBI-O0-NEXT:    ld hl, sp, 2
; GBI-O0-NEXT:    ld (hl), $03
; GBI-O0-NEXT:    ld hl, sp, 1
; GBI-O0-NEXT:    ld (hl), $02
; GBI-O0-NEXT:    ld b, $00
; GBI-O0-NEXT:    ld c, $01
; GBI-O0-NEXT:    call argument2
; GBI-O0-NEXT:    add sp, 2
; GBI-O0-NEXT:    ret
;
; GBI-O3-LABEL: call_argument2:
; GBI-O3:       ; %bb.0:
; GBI-O3-NEXT:    add sp, -2
; GBI-O3-NEXT:    ld hl, sp, 2
; GBI-O3-NEXT:    ld (hl), $03
; GBI-O3-NEXT:    ld hl, sp, 1
; GBI-O3-NEXT:    ld (hl), $02
; GBI-O3-NEXT:    ld b, $00
; GBI-O3-NEXT:    ld c, $01
; GBI-O3-NEXT:    call argument2
; GBI-O3-NEXT:    add sp, 2
; GBI-O3-NEXT:    ret
  %val = call i8 @argument2(i8 0, i8 1, i8 2, i8 3)
  ret i8 %val
}

define i8 @call_argument2_with_locals(i8 %b) nounwind {
; GBI-O0-LABEL: call_argument2_with_locals:
; GBI-O0:       ; %bb.0:
; GBI-O0-NEXT:    add sp, -3
; GBI-O0-NEXT:    ld hl, sp, 3
; GBI-O0-NEXT:    ld (hl), b
; GBI-O0-NEXT:    ld hl, sp, 2
; GBI-O0-NEXT:    ld (hl), $03
; GBI-O0-NEXT:    ld hl, sp, 1
; GBI-O0-NEXT:    ld (hl), $02
; GBI-O0-NEXT:    ld b, $00
; GBI-O0-NEXT:    ld c, $01
; GBI-O0-NEXT:    call argument2
; GBI-O0-NEXT:    ; kill: def $b killed $a
; GBI-O0-NEXT:    ld hl, sp, 3
; GBI-O0-NEXT:    ld a, (hl)
; GBI-O0-NEXT:    add sp, 3
; GBI-O0-NEXT:    ret
;
; GBI-O3-LABEL: call_argument2_with_locals:
; GBI-O3:       ; %bb.0:
; GBI-O3-NEXT:    add sp, -3
; GBI-O3-NEXT:    ld hl, sp, 3
; GBI-O3-NEXT:    ld (hl), b
; GBI-O3-NEXT:    ld hl, sp, 2
; GBI-O3-NEXT:    ld (hl), $03
; GBI-O3-NEXT:    ld hl, sp, 1
; GBI-O3-NEXT:    ld (hl), $02
; GBI-O3-NEXT:    ld b, $00
; GBI-O3-NEXT:    ld c, $01
; GBI-O3-NEXT:    call argument2
; GBI-O3-NEXT:    ld hl, sp, 3
; GBI-O3-NEXT:    ld a, (hl)
; GBI-O3-NEXT:    add sp, 3
; GBI-O3-NEXT:    ret
  %val = call i8 @argument2(i8 0, i8 1, i8 2, i8 3)
  ret i8 %b
}

define i8 @call_argument3() nounwind {
; GBI-O0-LABEL: call_argument3:
; GBI-O0:       ; %bb.0:
; GBI-O0-NEXT:    add sp, -2
; GBI-O0-NEXT:    ld hl, sp, 2
; GBI-O0-NEXT:    ld (hl), $03
; GBI-O0-NEXT:    ld hl, sp, 1
; GBI-O0-NEXT:    ld (hl), $02
; GBI-O0-NEXT:    ld b, $00
; GBI-O0-NEXT:    ld c, $01
; GBI-O0-NEXT:    call argument3
; GBI-O0-NEXT:    add sp, 2
; GBI-O0-NEXT:    ret
;
; GBI-O3-LABEL: call_argument3:
; GBI-O3:       ; %bb.0:
; GBI-O3-NEXT:    add sp, -2
; GBI-O3-NEXT:    ld hl, sp, 2
; GBI-O3-NEXT:    ld (hl), $03
; GBI-O3-NEXT:    ld hl, sp, 1
; GBI-O3-NEXT:    ld (hl), $02
; GBI-O3-NEXT:    ld b, $00
; GBI-O3-NEXT:    ld c, $01
; GBI-O3-NEXT:    call argument3
; GBI-O3-NEXT:    add sp, 2
; GBI-O3-NEXT:    ret
  %val = call i8 @argument3(i8 0, i8 1, i8 2, i8 3)
  ret i8 %val
}

define i32 @large_return() nounwind {
; GBI-O0-LABEL: large_return:
; GBI-O0:       ; %bb.0:
; GBI-O0-NEXT:    add sp, -4
; GBI-O0-NEXT:    add sp, 2
; GBI-O0-NEXT:    push hl
; GBI-O0-NEXT:    add sp, 0
; GBI-O0-NEXT:    ld bc, $0001
; GBI-O0-NEXT:    ld d, b
; GBI-O0-NEXT:    ld e, c
; GBI-O0-NEXT:    ld a, e
; GBI-O0-NEXT:    inc hl
; GBI-O0-NEXT:    ld (hl), a
; GBI-O0-NEXT:    add sp, 0
; GBI-O0-NEXT:    pop hl
; GBI-O0-NEXT:    add sp, -2
; GBI-O0-NEXT:    ld a, b
; GBI-O0-NEXT:    ld (hl), a
; GBI-O0-NEXT:    add sp, 0
; GBI-O0-NEXT:    pop hl
; GBI-O0-NEXT:    add sp, -2
; GBI-O0-NEXT:    ld bc, $0002
; GBI-O0-NEXT:    add hl, bc
; GBI-O0-NEXT:    ld b, h
; GBI-O0-NEXT:    ld c, l
; GBI-O0-NEXT:    add sp, 0
; GBI-O0-NEXT:    pop hl
; GBI-O0-NEXT:    add sp, -2
; GBI-O0-NEXT:    add sp, 4
; GBI-O0-NEXT:    push bc
; GBI-O0-NEXT:    add sp, -2
; GBI-O0-NEXT:    ld bc, $0003
; GBI-O0-NEXT:    add hl, bc
; GBI-O0-NEXT:    ld bc, $0000
; GBI-O0-NEXT:    ld d, b
; GBI-O0-NEXT:    ld e, c
; GBI-O0-NEXT:    ld a, e
; GBI-O0-NEXT:    ld (hl), a
; GBI-O0-NEXT:    add sp, 2
; GBI-O0-NEXT:    pop hl
; GBI-O0-NEXT:    add sp, -4
; GBI-O0-NEXT:    ld a, b
; GBI-O0-NEXT:    ld (hl), a
; GBI-O0-NEXT:    add sp, 4
; GBI-O0-NEXT:    ret
;
; GBI-O3-LABEL: large_return:
; GBI-O3:       ; %bb.0:
; GBI-O3-NEXT:    add sp, -2
; GBI-O3-NEXT:    ld b, h
; GBI-O3-NEXT:    ld c, l
; GBI-O3-NEXT:    ld de, $0001
; GBI-O3-NEXT:    inc hl
; GBI-O3-NEXT:    ld (hl), e
; GBI-O3-NEXT:    ld h, b
; GBI-O3-NEXT:    ld l, c
; GBI-O3-NEXT:    ld (hl), d
; GBI-O3-NEXT:    ld de, $0002
; GBI-O3-NEXT:    add hl, de
; GBI-O3-NEXT:    add sp, 2
; GBI-O3-NEXT:    push hl
; GBI-O3-NEXT:    add sp, 0
; GBI-O3-NEXT:    ld de, $0003
; GBI-O3-NEXT:    ; kill: def $bc
; GBI-O3-NEXT:    ld h, b
; GBI-O3-NEXT:    ld l, c
; GBI-O3-NEXT:    add hl, de
; GBI-O3-NEXT:    ld bc, $0000
; GBI-O3-NEXT:    ld (hl), c
; GBI-O3-NEXT:    add sp, 0
; GBI-O3-NEXT:    pop hl
; GBI-O3-NEXT:    add sp, -2
; GBI-O3-NEXT:    ld (hl), b
; GBI-O3-NEXT:    add sp, 2
; GBI-O3-NEXT:    ret
  ret i32 1
}

define i32 @call_large_return() nounwind {
; GBI-O0-LABEL: call_large_return:
; GBI-O0:       ; %bb.0:
; GBI-O0-NEXT:    add sp, -18
; GBI-O0-NEXT:    add sp, 10
; GBI-O0-NEXT:    push hl
; GBI-O0-NEXT:    add sp, -8
; GBI-O0-NEXT:    ld hl, sp, 13
; GBI-O0-NEXT:    add sp, 6
; GBI-O0-NEXT:    push hl
; GBI-O0-NEXT:    add sp, -4
; GBI-O0-NEXT:    call large_return
; GBI-O0-NEXT:    add sp, 4
; GBI-O0-NEXT:    pop hl
; GBI-O0-NEXT:    add sp, -6
; GBI-O0-NEXT:    ld b, h
; GBI-O0-NEXT:    ld c, l
; GBI-O0-NEXT:    ld a, c
; GBI-O0-NEXT:    ld de, $0002
; GBI-O0-NEXT:    ld b, d
; GBI-O0-NEXT:    ld c, e
; GBI-O0-NEXT:    ld b, c
; GBI-O0-NEXT:    or b
; GBI-O0-NEXT:    push hl
; GBI-O0-NEXT:    ld hl, sp, 0
; GBI-O0-NEXT:    ld (hl), a
; GBI-O0-NEXT:    pop hl
; GBI-O0-NEXT:    ld a, h
; GBI-O0-NEXT:    ld b, d
; GBI-O0-NEXT:    ld c, e
; GBI-O0-NEXT:    ; kill: def $b killed $b killed $bc
; GBI-O0-NEXT:    or b
; GBI-O0-NEXT:    ld h, a
; GBI-O0-NEXT:    push hl
; GBI-O0-NEXT:    ld hl, sp, 0
; GBI-O0-NEXT:    ld a, (hl)
; GBI-O0-NEXT:    pop hl
; GBI-O0-NEXT:    ; kill: def $h killed $h def $hl
; GBI-O0-NEXT:    ld l, a
; GBI-O0-NEXT:    add sp, 4
; GBI-O0-NEXT:    push hl
; GBI-O0-NEXT:    add sp, -2
; GBI-O0-NEXT:    ld b, (hl)
; GBI-O0-NEXT:    add sp, 2
; GBI-O0-NEXT:    pop hl
; GBI-O0-NEXT:    add sp, -4
; GBI-O0-NEXT:    inc hl
; GBI-O0-NEXT:    ld a, (hl)
; GBI-O0-NEXT:    add sp, 4
; GBI-O0-NEXT:    pop hl
; GBI-O0-NEXT:    add sp, -6
; GBI-O0-NEXT:    ; kill: def $b killed $b def $bc
; GBI-O0-NEXT:    ld c, a
; GBI-O0-NEXT:    inc hl
; GBI-O0-NEXT:    ld a, (hl)
; GBI-O0-NEXT:    add sp, 4
; GBI-O0-NEXT:    pop hl
; GBI-O0-NEXT:    add sp, -6
; GBI-O0-NEXT:    ld h, (hl)
; GBI-O0-NEXT:    ; kill: def $h killed $h def $hl
; GBI-O0-NEXT:    ld l, a
; GBI-O0-NEXT:    add sp, 8
; GBI-O0-NEXT:    push hl
; GBI-O0-NEXT:    add sp, -6
; GBI-O0-NEXT:    ld a, l
; GBI-O0-NEXT:    add sp, 8
; GBI-O0-NEXT:    pop hl
; GBI-O0-NEXT:    add sp, -10
; GBI-O0-NEXT:    inc hl
; GBI-O0-NEXT:    ld (hl), a
; GBI-O0-NEXT:    add sp, 6
; GBI-O0-NEXT:    pop hl
; GBI-O0-NEXT:    add sp, -8
; GBI-O0-NEXT:    ld a, h
; GBI-O0-NEXT:    add sp, 8
; GBI-O0-NEXT:    pop hl
; GBI-O0-NEXT:    add sp, -10
; GBI-O0-NEXT:    ld (hl), a
; GBI-O0-NEXT:    add sp, 8
; GBI-O0-NEXT:    pop hl
; GBI-O0-NEXT:    add sp, -10
; GBI-O0-NEXT:    add hl, de
; GBI-O0-NEXT:    ld d, h
; GBI-O0-NEXT:    ld e, l
; GBI-O0-NEXT:    add sp, 8
; GBI-O0-NEXT:    pop hl
; GBI-O0-NEXT:    add sp, -10
; GBI-O0-NEXT:    add sp, 12
; GBI-O0-NEXT:    push de
; GBI-O0-NEXT:    add sp, -10
; GBI-O0-NEXT:    ld de, $0003
; GBI-O0-NEXT:    add hl, de
; GBI-O0-NEXT:    ld a, c
; GBI-O0-NEXT:    ld (hl), a
; GBI-O0-NEXT:    add sp, 10
; GBI-O0-NEXT:    pop hl
; GBI-O0-NEXT:    add sp, -12
; GBI-O0-NEXT:    ld a, b
; GBI-O0-NEXT:    ld (hl), a
; GBI-O0-NEXT:    add sp, 18
; GBI-O0-NEXT:    ret
;
; GBI-O3-LABEL: call_large_return:
; GBI-O3:       ; %bb.0:
; GBI-O3-NEXT:    add sp, -14
; GBI-O3-NEXT:    add sp, 8
; GBI-O3-NEXT:    push hl
; GBI-O3-NEXT:    add sp, -6
; GBI-O3-NEXT:    ld hl, sp, 9
; GBI-O3-NEXT:    add sp, 2
; GBI-O3-NEXT:    push hl
; GBI-O3-NEXT:    add sp, 0
; GBI-O3-NEXT:    call large_return
; GBI-O3-NEXT:    ld bc, $0002
; GBI-O3-NEXT:    add sp, 6
; GBI-O3-NEXT:    push bc
; GBI-O3-NEXT:    add sp, -4
; GBI-O3-NEXT:    add sp, 0
; GBI-O3-NEXT:    pop de
; GBI-O3-NEXT:    add sp, -2
; GBI-O3-NEXT:    ld a, e
; GBI-O3-NEXT:    or c
; GBI-O3-NEXT:    ld l, a
; GBI-O3-NEXT:    ld a, d
; GBI-O3-NEXT:    or b
; GBI-O3-NEXT:    ld h, a
; GBI-O3-NEXT:    ld b, (hl)
; GBI-O3-NEXT:    inc hl
; GBI-O3-NEXT:    ld c, (hl)
; GBI-O3-NEXT:    add sp, 4
; GBI-O3-NEXT:    push bc
; GBI-O3-NEXT:    add sp, -2
; GBI-O3-NEXT:    ; kill: def $de
; GBI-O3-NEXT:    ld b, d
; GBI-O3-NEXT:    ld c, e
; GBI-O3-NEXT:    ld h, b
; GBI-O3-NEXT:    ld l, c
; GBI-O3-NEXT:    inc hl
; GBI-O3-NEXT:    ld e, (hl)
; GBI-O3-NEXT:    ; kill: def $bc
; GBI-O3-NEXT:    ld h, b
; GBI-O3-NEXT:    ld l, c
; GBI-O3-NEXT:    ld d, (hl)
; GBI-O3-NEXT:    add sp, 6
; GBI-O3-NEXT:    pop bc
; GBI-O3-NEXT:    add sp, -8
; GBI-O3-NEXT:    ld h, b
; GBI-O3-NEXT:    ld l, c
; GBI-O3-NEXT:    inc hl
; GBI-O3-NEXT:    ld (hl), e
; GBI-O3-NEXT:    ld h, b
; GBI-O3-NEXT:    ld l, c
; GBI-O3-NEXT:    ld (hl), d
; GBI-O3-NEXT:    add sp, 4
; GBI-O3-NEXT:    pop bc
; GBI-O3-NEXT:    add sp, -6
; GBI-O3-NEXT:    add hl, bc
; GBI-O3-NEXT:    ld d, h
; GBI-O3-NEXT:    ld e, l
; GBI-O3-NEXT:    ld bc, $0003
; GBI-O3-NEXT:    add sp, 6
; GBI-O3-NEXT:    pop hl
; GBI-O3-NEXT:    add sp, -8
; GBI-O3-NEXT:    add hl, bc
; GBI-O3-NEXT:    add sp, 2
; GBI-O3-NEXT:    pop bc
; GBI-O3-NEXT:    add sp, -4
; GBI-O3-NEXT:    ld (hl), c
; GBI-O3-NEXT:    ; kill: def $de
; GBI-O3-NEXT:    ld h, d
; GBI-O3-NEXT:    ld l, e
; GBI-O3-NEXT:    ld (hl), b
; GBI-O3-NEXT:    add sp, 14
; GBI-O3-NEXT:    ret
  %val = call i32 @large_return()
  ret i32 %val
}

define i16 @empty16() nounwind {
; GBI-O0-LABEL: empty16:
; GBI-O0:       ; %bb.0:
; GBI-O0-NEXT:    ld hl, $0001
; GBI-O0-NEXT:    ret
;
; GBI-O3-LABEL: empty16:
; GBI-O3:       ; %bb.0:
; GBI-O3-NEXT:    ld hl, $0001
; GBI-O3-NEXT:    ret
  ret i16 1
}

define i16 @test_spill_arg16(i16 %0) nounwind {
; GBI-O0-LABEL: test_spill_arg16:
; GBI-O0:       ; %bb.0:
; GBI-O0-NEXT:    add sp, -2
; GBI-O0-NEXT:    add sp, 2
; GBI-O0-NEXT:    push hl
; GBI-O0-NEXT:    add sp, 0
; GBI-O0-NEXT:    call empty16
; GBI-O0-NEXT:    ; kill: def $bc killed $hl
; GBI-O0-NEXT:    add sp, 0
; GBI-O0-NEXT:    pop hl
; GBI-O0-NEXT:    add sp, -2
; GBI-O0-NEXT:    add sp, 2
; GBI-O0-NEXT:    ret
;
; GBI-O3-LABEL: test_spill_arg16:
; GBI-O3:       ; %bb.0:
; GBI-O3-NEXT:    add sp, -2
; GBI-O3-NEXT:    add sp, 2
; GBI-O3-NEXT:    push hl
; GBI-O3-NEXT:    add sp, 0
; GBI-O3-NEXT:    call empty16
; GBI-O3-NEXT:    add sp, 0
; GBI-O3-NEXT:    pop hl
; GBI-O3-NEXT:    add sp, -2
; GBI-O3-NEXT:    add sp, 2
; GBI-O3-NEXT:    ret
  %val = call i16 @empty16()
  ret i16 %0
}

define i8 @empty8(i8 %0) nounwind {
; GBI-O0-LABEL: empty8:
; GBI-O0:       ; %bb.0:
; GBI-O0-NEXT:    ld a, b
; GBI-O0-NEXT:    ret
;
; GBI-O3-LABEL: empty8:
; GBI-O3:       ; %bb.0:
; GBI-O3-NEXT:    ld a, b
; GBI-O3-NEXT:    ret
  ret i8 %0
}

define i8 @test_spill_arg8(i8 %0) nounwind {
; GBI-O0-LABEL: test_spill_arg8:
; GBI-O0:       ; %bb.0:
; GBI-O0-NEXT:    add sp, -1
; GBI-O0-NEXT:    ld hl, sp, 1
; GBI-O0-NEXT:    ld (hl), b
; GBI-O0-NEXT:    call empty8
; GBI-O0-NEXT:    ; kill: def $b killed $a
; GBI-O0-NEXT:    ld hl, sp, 1
; GBI-O0-NEXT:    ld a, (hl)
; GBI-O0-NEXT:    add sp, 1
; GBI-O0-NEXT:    ret
;
; GBI-O3-LABEL: test_spill_arg8:
; GBI-O3:       ; %bb.0:
; GBI-O3-NEXT:    add sp, -1
; GBI-O3-NEXT:    ld hl, sp, 1
; GBI-O3-NEXT:    ld (hl), b
; GBI-O3-NEXT:    call empty8
; GBI-O3-NEXT:    ld hl, sp, 1
; GBI-O3-NEXT:    ld a, (hl)
; GBI-O3-NEXT:    add sp, 1
; GBI-O3-NEXT:    ret
  %val = call i8 @empty8(i8 %0)
  ret i8 %0
}
