; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 3
; RUN: llc -mtriple=gb -verify-machineinstrs -O3 < %s \
; RUN:   | FileCheck %s -check-prefix=GBI-O3

define fastcc i8 @argument0(i8 %0, i8 %1, i8 %2, i8 %3) nounwind {
; GBI-O3-LABEL: argument0:
; GBI-O3:       # %bb.0:
; GBI-O3-NEXT:    ld a, b
; GBI-O3-NEXT:    ret
  ret i8 %0
}


define fastcc i8 @argument1(i8 %0, i8 %1, i8 %2, i8 %3) nounwind {
; GBI-O3-LABEL: argument1:
; GBI-O3:       # %bb.0:
; GBI-O3-NEXT:    ld a, c
; GBI-O3-NEXT:    ret
  ret i8 %1
}

define fastcc i8 @argument2(i8 %0, i8 %1, i8 %2, i8 %3) nounwind {
; GBI-O3-LABEL: argument2:
; GBI-O3:       # %bb.0:
; GBI-O3-NEXT:    ld a, d
; GBI-O3-NEXT:    ret
  ret i8 %2
}

define fastcc i8 @argument0_i16(i16 %0, i16 %1) nounwind {
; GBI-O3-LABEL: argument0_i16:
; GBI-O3:       # %bb.0:
; GBI-O3-NEXT:    ld a, l
; GBI-O3-NEXT:    ret
  %res = trunc i16 %0 to i8
  ret i8 %res
}

define fastcc i32 @argument0_i32(i32 %0) nounwind {
; GBI-O3-LABEL: argument0_i32:
; GBI-O3:       # %bb.0:
; GBI-O3-NEXT:    ld a, c
; GBI-O3-NEXT:    ldi (hl), a
; GBI-O3-NEXT:    ld a, b
; GBI-O3-NEXT:    ldi (hl), a
; GBI-O3-NEXT:    ld a, e
; GBI-O3-NEXT:    ldi (hl), a
; GBI-O3-NEXT:    ld a, d
; GBI-O3-NEXT:    ld (hl), a
; GBI-O3-NEXT:    ret
  ret i32 %0
}

define fastcc i8 @argument1_i16(i16 %0, i16 %1) nounwind {
; GBI-O3-LABEL: argument1_i16:
; GBI-O3:       # %bb.0:
; GBI-O3-NEXT:    ld a, c
; GBI-O3-NEXT:    ret
  %res = trunc i16 %1 to i8
  ret i8 %res
}

define fastcc i8 @argument3(i8 %0, i8 %1, i8 %2, i8 %3) nounwind {
; GBI-O3-LABEL: argument3:
; GBI-O3:       # %bb.0:
; GBI-O3-NEXT:    ld a, e
; GBI-O3-NEXT:    ret
  ret i8 %3
}


define fastcc i8 @argument4(i8 %0, i8 %1, i8 %2, i8 %3, i8 %4) nounwind {
; GBI-O3-LABEL: argument4:
; GBI-O3:       # %bb.0:
; GBI-O3-NEXT:    ld hl, sp, 2
; GBI-O3-NEXT:    ld a, (hl)
; GBI-O3-NEXT:    ret
  ret i8 %4
}

define fastcc i8 @call_argument2() nounwind {
; GBI-O3-LABEL: call_argument2:
; GBI-O3:       # %bb.0:
; GBI-O3-NEXT:    ld b, $00
; GBI-O3-NEXT:    ld c, $01
; GBI-O3-NEXT:    ld d, $02
; GBI-O3-NEXT:    ld e, $03
; GBI-O3-NEXT:    call argument2
; GBI-O3-NEXT:    ret
  %val = call fastcc i8 @argument2(i8 0, i8 1, i8 2, i8 3)
  ret i8 %val
}

define fastcc i8 @call_argument1_i16() nounwind {
; GBI-O3-LABEL: call_argument1_i16:
; GBI-O3:       # %bb.0:
; GBI-O3-NEXT:    ld hl, $0000
; GBI-O3-NEXT:    ld bc, $0001
; GBI-O3-NEXT:    call argument1_i16
; GBI-O3-NEXT:    ret
  %val = call fastcc i8 @argument1_i16(i16 0, i16 1)
  ret i8 %val
}

define fastcc i8 @call_argument2_with_locals(i8 %b) nounwind {
; GBI-O3-LABEL: call_argument2_with_locals:
; GBI-O3:       # %bb.0:
; GBI-O3-NEXT:    add sp, -2
; GBI-O3-NEXT:    ld hl, sp, 1
; GBI-O3-NEXT:    ld (hl), b
; GBI-O3-NEXT:    ld b, $00
; GBI-O3-NEXT:    ld c, $01
; GBI-O3-NEXT:    ld d, $02
; GBI-O3-NEXT:    ld e, $03
; GBI-O3-NEXT:    call argument2
; GBI-O3-NEXT:    ld hl, sp, 1
; GBI-O3-NEXT:    ld a, (hl)
; GBI-O3-NEXT:    add sp, 2
; GBI-O3-NEXT:    ret
  %val = call fastcc i8 @argument2(i8 0, i8 1, i8 2, i8 3)
  ret i8 %b
}

define fastcc i8 @call_argument3() nounwind {
; GBI-O3-LABEL: call_argument3:
; GBI-O3:       # %bb.0:
; GBI-O3-NEXT:    ld b, $00
; GBI-O3-NEXT:    ld c, $01
; GBI-O3-NEXT:    ld d, $02
; GBI-O3-NEXT:    ld e, $03
; GBI-O3-NEXT:    call argument3
; GBI-O3-NEXT:    ret
  %val = call fastcc i8 @argument3(i8 0, i8 1, i8 2, i8 3)
  ret i8 %val
}

define fastcc i32 @large_return() nounwind {
; GBI-O3-LABEL: large_return:
; GBI-O3:       # %bb.0:
; GBI-O3-NEXT:    ld a, $01
; GBI-O3-NEXT:    ldi (hl), a
; GBI-O3-NEXT:    ld a, $00
; GBI-O3-NEXT:    ldi (hl), a
; GBI-O3-NEXT:    ldi (hl), a
; GBI-O3-NEXT:    ld (hl), a
; GBI-O3-NEXT:    ret
  ret i32 1
}

define fastcc i32 @call_large_return() nounwind {
; GBI-O3-LABEL: call_large_return:
; GBI-O3:       # %bb.0:
; GBI-O3-NEXT:    add sp, -8
; GBI-O3-NEXT:    ld b, h
; GBI-O3-NEXT:    ld a, l
; GBI-O3-NEXT:    ld hl, sp, 0
; GBI-O3-NEXT:    ldi (hl), a
; GBI-O3-NEXT:    ld (hl), b
; GBI-O3-NEXT:    ld hl, sp, 4
; GBI-O3-NEXT:    ld b, h
; GBI-O3-NEXT:    ld a, l
; GBI-O3-NEXT:    ld hl, sp, 2
; GBI-O3-NEXT:    ldi (hl), a
; GBI-O3-NEXT:    ld (hl), b
; GBI-O3-NEXT:    ld l, a
; GBI-O3-NEXT:    ld h, b
; GBI-O3-NEXT:    call large_return
; GBI-O3-NEXT:    ld hl, sp, 2
; GBI-O3-NEXT:    ld e, (hl)
; GBI-O3-NEXT:    inc hl
; GBI-O3-NEXT:    ld d, (hl)
; GBI-O3-NEXT:    inc de
; GBI-O3-NEXT:    ld h, d
; GBI-O3-NEXT:    ld l, e
; GBI-O3-NEXT:    inc hl
; GBI-O3-NEXT:    ld b, h
; GBI-O3-NEXT:    ld c, l
; GBI-O3-NEXT:    inc bc
; GBI-O3-NEXT:    ld a, (bc)
; GBI-O3-NEXT:    ld b, a
; GBI-O3-NEXT:    ld c, (hl)
; GBI-O3-NEXT:    ld a, (de)
; GBI-O3-NEXT:    ld d, a
; GBI-O3-NEXT:    ld hl, sp, 2
; GBI-O3-NEXT:    ldi a, (hl)
; GBI-O3-NEXT:    ld h, (hl)
; GBI-O3-NEXT:    ld l, a
; GBI-O3-NEXT:    ld a, (hl)
; GBI-O3-NEXT:    ld hl, sp, 0
; GBI-O3-NEXT:    ld e, (hl)
; GBI-O3-NEXT:    inc hl
; GBI-O3-NEXT:    ld h, (hl)
; GBI-O3-NEXT:    ld l, e
; GBI-O3-NEXT:    ldi (hl), a
; GBI-O3-NEXT:    ld a, d
; GBI-O3-NEXT:    ldi (hl), a
; GBI-O3-NEXT:    ld a, c
; GBI-O3-NEXT:    ldi (hl), a
; GBI-O3-NEXT:    ld a, b
; GBI-O3-NEXT:    ld (hl), a
; GBI-O3-NEXT:    add sp, 8
; GBI-O3-NEXT:    ret
  %val = call fastcc i32 @large_return()
  ret i32 %val
}

define fastcc i16 @empty16() nounwind {
; GBI-O3-LABEL: empty16:
; GBI-O3:       # %bb.0:
; GBI-O3-NEXT:    ld hl, $0001
; GBI-O3-NEXT:    ret
  ret i16 1
}

define fastcc i16 @test_spill_arg16(i16 %0) nounwind {
; GBI-O3-LABEL: test_spill_arg16:
; GBI-O3:       # %bb.0:
; GBI-O3-NEXT:    add sp, -2
; GBI-O3-NEXT:    ld b, h
; GBI-O3-NEXT:    ld a, l
; GBI-O3-NEXT:    ld hl, sp, 0
; GBI-O3-NEXT:    ldi (hl), a
; GBI-O3-NEXT:    ld (hl), b
; GBI-O3-NEXT:    call empty16
; GBI-O3-NEXT:    ld hl, sp, 0
; GBI-O3-NEXT:    ldi a, (hl)
; GBI-O3-NEXT:    ld h, (hl)
; GBI-O3-NEXT:    ld l, a
; GBI-O3-NEXT:    add sp, 2
; GBI-O3-NEXT:    ret
  %val = call fastcc i16 @empty16()
  ret i16 %0
}

define fastcc i8 @empty8(i8 %0) nounwind {
; GBI-O3-LABEL: empty8:
; GBI-O3:       # %bb.0:
; GBI-O3-NEXT:    ld a, b
; GBI-O3-NEXT:    ret
  ret i8 %0
}

define fastcc i8 @test_spill_arg8(i8 %0) nounwind {
; GBI-O3-LABEL: test_spill_arg8:
; GBI-O3:       # %bb.0:
; GBI-O3-NEXT:    add sp, -2
; GBI-O3-NEXT:    ld hl, sp, 1
; GBI-O3-NEXT:    ld (hl), b
; GBI-O3-NEXT:    call empty8
; GBI-O3-NEXT:    ld hl, sp, 1
; GBI-O3-NEXT:    ld a, (hl)
; GBI-O3-NEXT:    add sp, 2
; GBI-O3-NEXT:    ret
  %val = call fastcc i8 @empty8(i8 %0)
  ret i8 %0
}

 @untyped_fn_symbol = external global ptr
 define i8 @call_untyped_fn() {
; GBI-O3-LABEL: call_untyped_fn:
; GBI-O3:       # %bb.0:
; GBI-O3-NEXT:    ld a, (untyped_fn_symbol+1)
; GBI-O3-NEXT:    ld h, a
; GBI-O3-NEXT:    ld a, (untyped_fn_symbol)
; GBI-O3-NEXT:    ld l, a
; GBI-O3-NEXT:    call (hl)
; GBI-O3-NEXT:    ret
  %1 = load ptr, ptr @untyped_fn_symbol
  %2 = call noundef i8 %1()
  ret i8 %2
}

define fastcc i1 @tail_caller(ptr %0) {
; GBI-O3-LABEL: tail_caller:
; GBI-O3:       # %bb.0:
; GBI-O3-NEXT:    call tail_callee
; GBI-O3-NEXT:    ret
  %3 = tail call fastcc i1 @tail_callee(ptr %0)
  ret i1 %3
}

define fastcc i1 @tail_callee(ptr %0) {
; GBI-O3-LABEL: tail_callee:
; GBI-O3:       # %bb.0:
; GBI-O3-NEXT:    ld a, (hl)
; GBI-O3-NEXT:    add $f9
; GBI-O3-NEXT:    cp $01
; GBI-O3-NEXT:    rla
; GBI-O3-NEXT:    ret
  %3 = load i8, ptr %0
  %4 = icmp eq i8 %3, 7
  ret i1 %4
}

define fastcc ptr @call_with_save(ptr %0) {
; GBI-O3-LABEL: call_with_save:
; GBI-O3:       # %bb.0:
; GBI-O3-NEXT:    add sp, -2
; GBI-O3-NEXT:    ld b, h
; GBI-O3-NEXT:    ld a, l
; GBI-O3-NEXT:    ld hl, sp, 0
; GBI-O3-NEXT:    ldi (hl), a
; GBI-O3-NEXT:    ld (hl), b
; GBI-O3-NEXT:    ld l, a
; GBI-O3-NEXT:    ld h, b
; GBI-O3-NEXT:    call tail_callee
; GBI-O3-NEXT:    ld hl, sp, 0
; GBI-O3-NEXT:    ldi a, (hl)
; GBI-O3-NEXT:    ld h, (hl)
; GBI-O3-NEXT:    ld l, a
; GBI-O3-NEXT:    add sp, 2
; GBI-O3-NEXT:    ret
  %2 = tail call fastcc i1 @tail_callee(ptr %0)
  ret ptr %0
}

define internal fastcc i1 @fastcc_callee(ptr %0) {
; GBI-O3-LABEL: fastcc_callee:
; GBI-O3:       # %bb.0:
; GBI-O3-NEXT:    ld a, (hl)
; GBI-O3-NEXT:    add $f9
; GBI-O3-NEXT:    cp $01
; GBI-O3-NEXT:    rla
; GBI-O3-NEXT:    ret
  %3 = load i8, ptr %0
  %4 = icmp eq i8 %3, 7
  ret i1 %4
}

define ptr @call_fastcc(ptr %0) {
; GBI-O3-LABEL: call_fastcc:
; GBI-O3:       # %bb.0:
; GBI-O3-NEXT:    add sp, -2
; GBI-O3-NEXT:    ld hl, sp, 0
; GBI-O3-NEXT:    ld a, c
; GBI-O3-NEXT:    ldi (hl), a
; GBI-O3-NEXT:    ld (hl), b
; GBI-O3-NEXT:    ld h, b
; GBI-O3-NEXT:    ld l, c
; GBI-O3-NEXT:    call fastcc_callee
; GBI-O3-NEXT:    ld hl, sp, 0
; GBI-O3-NEXT:    ldi a, (hl)
; GBI-O3-NEXT:    ld h, (hl)
; GBI-O3-NEXT:    ld l, a
; GBI-O3-NEXT:    add sp, 2
; GBI-O3-NEXT:    ret
  %2 = tail call fastcc i1 @fastcc_callee(ptr %0)
  ret ptr %0
}

define linkonce_odr dso_local fastcc noundef zeroext i8 @clang_fn(i8 noundef zeroext %lhs, i8 noundef zeroext %rhs) local_unnamed_addr {
; GBI-O3-LABEL: clang_fn:
; GBI-O3:       # %bb.0:
; GBI-O3-NEXT:    ld a, $02
; GBI-O3-NEXT:    ret
  ret i8 2
}

declare dso_local void @fn_normal_cc()

define dso_local gb_interrupt_cc void @fn_int_c() {
; GBI-O3-LABEL: fn_int_c:
; GBI-O3:       # %bb.0:
; GBI-O3-NEXT:    push bc
; GBI-O3-NEXT:    push de
; GBI-O3-NEXT:    call fn_normal_cc
; GBI-O3-NEXT:    pop de
; GBI-O3-NEXT:    pop bc
; GBI-O3-NEXT:    ret
  call void @fn_normal_cc()
  ret void
}

define fastcc i16 @call_interrupt_cc(i16 %arg) {
; GBI-O3-LABEL: call_interrupt_cc:
; GBI-O3:       # %bb.0:
; GBI-O3-NEXT:    ld b, h
; GBI-O3-NEXT:    ld c, l
; GBI-O3-NEXT:    call fn_int_c
; GBI-O3-NEXT:    ld h, b
; GBI-O3-NEXT:    ld l, c
; GBI-O3-NEXT:    ret
  call gb_interrupt_cc void @fn_int_c()
  ret i16 %arg
}


define gb_interrupt_cc void @complex_interrupt_cc() {
; GBI-O3-LABEL: complex_interrupt_cc:
; GBI-O3:       # %bb.0:
; GBI-O3-NEXT:    push bc
; GBI-O3-NEXT:    push de
; GBI-O3-NEXT:    add sp, -4
; GBI-O3-NEXT:    ld bc, $000a
; GBI-O3-NEXT:    ld de, $0000
; GBI-O3-NEXT:    ld hl, sp, 0
; GBI-O3-NEXT:    call argument0_i32
; GBI-O3-NEXT:    add sp, 4
; GBI-O3-NEXT:    pop de
; GBI-O3-NEXT:    pop bc
; GBI-O3-NEXT:    ret
  %a = call fastcc i32 @argument0_i32(i32 10)
  ret void
}


declare void @fn_a(i16 %input) align 2;

@fn_ptr = external global ptr;

define fastcc i16 @indirect_cc() {
; GBI-O3-LABEL: indirect_cc:
; GBI-O3:       # %bb.0: # %entry
; GBI-O3-NEXT:    ld a, (fn_ptr+1)
; GBI-O3-NEXT:    ld h, a
; GBI-O3-NEXT:    ld a, (fn_ptr)
; GBI-O3-NEXT:    ld l, a
; GBI-O3-NEXT:    ld bc, $0002
; GBI-O3-NEXT:    call (hl)
; GBI-O3-NEXT:    ld hl, $0000
; GBI-O3-NEXT:    ret
entry:
  %0 = load ptr, ptr @fn_ptr, align 2
  tail call void %0(i16 2)
  ret i16 0
}
