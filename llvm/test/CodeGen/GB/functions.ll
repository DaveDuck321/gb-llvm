; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 3
; RUN: llc -mtriple=gb -verify-machineinstrs -O3 < %s \
; RUN:   | FileCheck %s -check-prefix=GBI-O3

define i8 @argument0(i8 %0, i8 %1, i8 %2, i8 %3) nounwind {
; GBI-O3-LABEL: argument0:
; GBI-O3:       ; %bb.0:
; GBI-O3-NEXT:    ld a, b
; GBI-O3-NEXT:    ret
  ret i8 %0
}


define i8 @argument1(i8 %0, i8 %1, i8 %2, i8 %3) nounwind {
; GBI-O3-LABEL: argument1:
; GBI-O3:       ; %bb.0:
; GBI-O3-NEXT:    ld a, c
; GBI-O3-NEXT:    ret
  ret i8 %1
}

define i8 @argument2(i8 %0, i8 %1, i8 %2, i8 %3) nounwind {
; GBI-O3-LABEL: argument2:
; GBI-O3:       ; %bb.0:
; GBI-O3-NEXT:    ld hl, sp, 2
; GBI-O3-NEXT:    ld a, (hl)
; GBI-O3-NEXT:    ret
  ret i8 %2
}

define i8 @argument0_i16(i16 %0, i16 %1) nounwind {
; GBI-O3-LABEL: argument0_i16:
; GBI-O3:       ; %bb.0:
; GBI-O3-NEXT:    ld a, l
; GBI-O3-NEXT:    ret
  %res = trunc i16 %0 to i8
  ret i8 %res
}

define i8 @argument1_i16(i16 %0, i16 %1) nounwind {
; GBI-O3-LABEL: argument1_i16:
; GBI-O3:       ; %bb.0:
; GBI-O3-NEXT:    ld hl, sp, 2
; GBI-O3-NEXT:    ld a, (hl)
; GBI-O3-NEXT:    ret
  %res = trunc i16 %1 to i8
  ret i8 %res
}

define i8 @argument3(i8 %0, i8 %1, i8 %2, i8 %3) nounwind {
; GBI-O3-LABEL: argument3:
; GBI-O3:       ; %bb.0:
; GBI-O3-NEXT:    ld hl, sp, 3
; GBI-O3-NEXT:    ld a, (hl)
; GBI-O3-NEXT:    ret
  ret i8 %3
}

define i8 @call_argument2() nounwind {
; GBI-O3-LABEL: call_argument2:
; GBI-O3:       ; %bb.0:
; GBI-O3-NEXT:    add sp, -2
; GBI-O3-NEXT:    ld hl, sp, 1
; GBI-O3-NEXT:    ld (hl), $03
; GBI-O3-NEXT:    ld hl, sp, 0
; GBI-O3-NEXT:    ld (hl), $02
; GBI-O3-NEXT:    ld b, $00
; GBI-O3-NEXT:    ld c, $01
; GBI-O3-NEXT:    call argument2
; GBI-O3-NEXT:    add sp, 2
; GBI-O3-NEXT:    ret
  %val = call i8 @argument2(i8 0, i8 1, i8 2, i8 3)
  ret i8 %val
}

define i8 @call_argument1_i16() nounwind {
; GBI-O3-LABEL: call_argument1_i16:
; GBI-O3:       ; %bb.0:
; GBI-O3-NEXT:    add sp, -2
; GBI-O3-NEXT:    ld hl, sp, 0
; GBI-O3-NEXT:    ld b, h
; GBI-O3-NEXT:    ld c, l
; GBI-O3-NEXT:    ld a, c
; GBI-O3-NEXT:    add $01
; GBI-O3-NEXT:    ld l, a
; GBI-O3-NEXT:    ld a, b
; GBI-O3-NEXT:    adc $00
; GBI-O3-NEXT:    ld h, a
; GBI-O3-NEXT:    ld (hl), $00
; GBI-O3-NEXT:    ld e, $00
; GBI-O3-NEXT:    ld d, e
; GBI-O3-NEXT:    ld h, b
; GBI-O3-NEXT:    ld l, c
; GBI-O3-NEXT:    ; kill: def $bc
; GBI-O3-NEXT:    ld (hl), $01
; GBI-O3-NEXT:    ld h, d
; GBI-O3-NEXT:    ld l, e
; GBI-O3-NEXT:    ; kill: def $de
; GBI-O3-NEXT:    call argument1_i16
; GBI-O3-NEXT:    add sp, 2
; GBI-O3-NEXT:    ret
  %val = call i8 @argument1_i16(i16 0, i16 1)
  ret i8 %val
}

define i8 @call_argument2_with_locals(i8 %b) nounwind {
; GBI-O3-LABEL: call_argument2_with_locals:
; GBI-O3:       ; %bb.0:
; GBI-O3-NEXT:    add sp, -4
; GBI-O3-NEXT:    ld hl, sp, 3
; GBI-O3-NEXT:    ld (hl), b
; GBI-O3-NEXT:    ld hl, sp, 1
; GBI-O3-NEXT:    ld (hl), $03
; GBI-O3-NEXT:    ld hl, sp, 0
; GBI-O3-NEXT:    ld (hl), $02
; GBI-O3-NEXT:    ld b, $00
; GBI-O3-NEXT:    ld c, $01
; GBI-O3-NEXT:    call argument2
; GBI-O3-NEXT:    ld hl, sp, 3
; GBI-O3-NEXT:    ld a, (hl)
; GBI-O3-NEXT:    add sp, 4
; GBI-O3-NEXT:    ret
  %val = call i8 @argument2(i8 0, i8 1, i8 2, i8 3)
  ret i8 %b
}

define i8 @call_argument3() nounwind {
; GBI-O3-LABEL: call_argument3:
; GBI-O3:       ; %bb.0:
; GBI-O3-NEXT:    add sp, -2
; GBI-O3-NEXT:    ld hl, sp, 1
; GBI-O3-NEXT:    ld (hl), $03
; GBI-O3-NEXT:    ld hl, sp, 0
; GBI-O3-NEXT:    ld (hl), $02
; GBI-O3-NEXT:    ld b, $00
; GBI-O3-NEXT:    ld c, $01
; GBI-O3-NEXT:    call argument3
; GBI-O3-NEXT:    add sp, 2
; GBI-O3-NEXT:    ret
  %val = call i8 @argument3(i8 0, i8 1, i8 2, i8 3)
  ret i8 %val
}

define i32 @large_return() nounwind {
; GBI-O3-LABEL: large_return:
; GBI-O3:       ; %bb.0:
; GBI-O3-NEXT:    ld d, h
; GBI-O3-NEXT:    ld e, l
; GBI-O3-NEXT:    ld (hl), $01
; GBI-O3-NEXT:    ld a, e
; GBI-O3-NEXT:    add $02
; GBI-O3-NEXT:    ld c, a
; GBI-O3-NEXT:    ld a, d
; GBI-O3-NEXT:    adc $00
; GBI-O3-NEXT:    ld b, a
; GBI-O3-NEXT:    ld h, b
; GBI-O3-NEXT:    ld l, c
; GBI-O3-NEXT:    ld (hl), $00
; GBI-O3-NEXT:    ld a, e
; GBI-O3-NEXT:    add $01
; GBI-O3-NEXT:    ld l, a
; GBI-O3-NEXT:    ld a, d
; GBI-O3-NEXT:    adc $00
; GBI-O3-NEXT:    ld h, a
; GBI-O3-NEXT:    ld (hl), $00
; GBI-O3-NEXT:    ld a, c
; GBI-O3-NEXT:    add $01
; GBI-O3-NEXT:    ld l, a
; GBI-O3-NEXT:    ld a, b
; GBI-O3-NEXT:    adc $00
; GBI-O3-NEXT:    ld h, a
; GBI-O3-NEXT:    ld (hl), $00
; GBI-O3-NEXT:    ret
  ret i32 1
}

define i32 @call_large_return() nounwind {
; GBI-O3-LABEL: call_large_return:
; GBI-O3:       ; %bb.0:
; GBI-O3-NEXT:    add sp, -14
; GBI-O3-NEXT:    ld b, h
; GBI-O3-NEXT:    ld a, l
; GBI-O3-NEXT:    ld hl, sp, 4
; GBI-O3-NEXT:    ldi (hl), a
; GBI-O3-NEXT:    ld (hl), b
; GBI-O3-NEXT:    ld hl, sp, 8
; GBI-O3-NEXT:    ld b, h
; GBI-O3-NEXT:    ld a, l
; GBI-O3-NEXT:    ld hl, sp, 0
; GBI-O3-NEXT:    ldi (hl), a
; GBI-O3-NEXT:    ld (hl), b
; GBI-O3-NEXT:    ld l, a
; GBI-O3-NEXT:    ld h, b
; GBI-O3-NEXT:    call large_return
; GBI-O3-NEXT:    ld hl, sp, 0
; GBI-O3-NEXT:    ld e, (hl)
; GBI-O3-NEXT:    inc hl
; GBI-O3-NEXT:    ld d, (hl)
; GBI-O3-NEXT:    ld a, e
; GBI-O3-NEXT:    add $02
; GBI-O3-NEXT:    ld c, a
; GBI-O3-NEXT:    ld a, d
; GBI-O3-NEXT:    adc $00
; GBI-O3-NEXT:    ld b, a
; GBI-O3-NEXT:    ld a, c
; GBI-O3-NEXT:    add $01
; GBI-O3-NEXT:    ld l, a
; GBI-O3-NEXT:    ld a, b
; GBI-O3-NEXT:    adc $00
; GBI-O3-NEXT:    ld h, a
; GBI-O3-NEXT:    ld a, (hl)
; GBI-O3-NEXT:    ld hl, sp, 7
; GBI-O3-NEXT:    ld (hl), a
; GBI-O3-NEXT:    ld a, e
; GBI-O3-NEXT:    add $01
; GBI-O3-NEXT:    ld l, a
; GBI-O3-NEXT:    ld a, d
; GBI-O3-NEXT:    adc $00
; GBI-O3-NEXT:    ld h, a
; GBI-O3-NEXT:    ld a, (hl)
; GBI-O3-NEXT:    ld hl, sp, 3
; GBI-O3-NEXT:    ld (hl), a
; GBI-O3-NEXT:    ld h, b
; GBI-O3-NEXT:    ld l, c
; GBI-O3-NEXT:    ; kill: def $bc
; GBI-O3-NEXT:    ld a, (hl)
; GBI-O3-NEXT:    ld hl, sp, 2
; GBI-O3-NEXT:    ld (hl), a
; GBI-O3-NEXT:    ld h, d
; GBI-O3-NEXT:    ld l, e
; GBI-O3-NEXT:    ; kill: def $de
; GBI-O3-NEXT:    ld a, (hl)
; GBI-O3-NEXT:    ld hl, sp, 4
; GBI-O3-NEXT:    ld e, (hl)
; GBI-O3-NEXT:    inc hl
; GBI-O3-NEXT:    ld d, (hl)
; GBI-O3-NEXT:    ld h, d
; GBI-O3-NEXT:    ld l, e
; GBI-O3-NEXT:    ld (hl), a
; GBI-O3-NEXT:    ld a, e
; GBI-O3-NEXT:    add $02
; GBI-O3-NEXT:    ld c, a
; GBI-O3-NEXT:    ld a, d
; GBI-O3-NEXT:    adc $00
; GBI-O3-NEXT:    ld b, a
; GBI-O3-NEXT:    ld h, b
; GBI-O3-NEXT:    ld l, c
; GBI-O3-NEXT:    push hl
; GBI-O3-NEXT:    ld hl, sp, 4
; GBI-O3-NEXT:    ld a, (hl)
; GBI-O3-NEXT:    pop hl
; GBI-O3-NEXT:    ld (hl), a
; GBI-O3-NEXT:    ld a, e
; GBI-O3-NEXT:    add $01
; GBI-O3-NEXT:    ld l, a
; GBI-O3-NEXT:    ld a, d
; GBI-O3-NEXT:    adc $00
; GBI-O3-NEXT:    ld h, a
; GBI-O3-NEXT:    push hl
; GBI-O3-NEXT:    ld hl, sp, 5
; GBI-O3-NEXT:    ld a, (hl)
; GBI-O3-NEXT:    pop hl
; GBI-O3-NEXT:    ld (hl), a
; GBI-O3-NEXT:    ld a, c
; GBI-O3-NEXT:    add $01
; GBI-O3-NEXT:    ld l, a
; GBI-O3-NEXT:    ld a, b
; GBI-O3-NEXT:    adc $00
; GBI-O3-NEXT:    ld h, a
; GBI-O3-NEXT:    push hl
; GBI-O3-NEXT:    ld hl, sp, 9
; GBI-O3-NEXT:    ld a, (hl)
; GBI-O3-NEXT:    pop hl
; GBI-O3-NEXT:    ld (hl), a
; GBI-O3-NEXT:    add sp, 14
; GBI-O3-NEXT:    ret
  %val = call i32 @large_return()
  ret i32 %val
}

define i16 @empty16() nounwind {
; GBI-O3-LABEL: empty16:
; GBI-O3:       ; %bb.0:
; GBI-O3-NEXT:    ld h, $00
; GBI-O3-NEXT:    ld l, $01
; GBI-O3-NEXT:    ret
  ret i16 1
}

define i16 @test_spill_arg16(i16 %0) nounwind {
; GBI-O3-LABEL: test_spill_arg16:
; GBI-O3:       ; %bb.0:
; GBI-O3-NEXT:    add sp, -2
; GBI-O3-NEXT:    ld b, h
; GBI-O3-NEXT:    ld a, l
; GBI-O3-NEXT:    ld hl, sp, 0
; GBI-O3-NEXT:    ldi (hl), a
; GBI-O3-NEXT:    ld (hl), b
; GBI-O3-NEXT:    call empty16
; GBI-O3-NEXT:    ld hl, sp, 0
; GBI-O3-NEXT:    ldi a, (hl)
; GBI-O3-NEXT:    ld h, (hl)
; GBI-O3-NEXT:    ld l, a
; GBI-O3-NEXT:    add sp, 2
; GBI-O3-NEXT:    ret
  %val = call i16 @empty16()
  ret i16 %0
}

define i8 @empty8(i8 %0) nounwind {
; GBI-O3-LABEL: empty8:
; GBI-O3:       ; %bb.0:
; GBI-O3-NEXT:    ld a, b
; GBI-O3-NEXT:    ret
  ret i8 %0
}

define i8 @test_spill_arg8(i8 %0) nounwind {
; GBI-O3-LABEL: test_spill_arg8:
; GBI-O3:       ; %bb.0:
; GBI-O3-NEXT:    add sp, -2
; GBI-O3-NEXT:    ld hl, sp, 1
; GBI-O3-NEXT:    ld (hl), b
; GBI-O3-NEXT:    call empty8
; GBI-O3-NEXT:    ld hl, sp, 1
; GBI-O3-NEXT:    ld a, (hl)
; GBI-O3-NEXT:    add sp, 2
; GBI-O3-NEXT:    ret
  %val = call i8 @empty8(i8 %0)
  ret i8 %0
}

 @untyped_fn_symbol = external global ptr
 define i8 @call_untyped_fn() {
; GBI-O3-LABEL: call_untyped_fn:
; GBI-O3:       ; %bb.0:
; GBI-O3-NEXT:    ld bc, untyped_fn_symbol
; GBI-O3-NEXT:    ld a, c
; GBI-O3-NEXT:    add $01
; GBI-O3-NEXT:    ld l, a
; GBI-O3-NEXT:    ld a, b
; GBI-O3-NEXT:    adc $00
; GBI-O3-NEXT:    ld h, a
; GBI-O3-NEXT:    ld d, (hl)
; GBI-O3-NEXT:    ld h, b
; GBI-O3-NEXT:    ld l, c
; GBI-O3-NEXT:    ; kill: def $bc
; GBI-O3-NEXT:    ld e, (hl)
; GBI-O3-NEXT:    ld h, d
; GBI-O3-NEXT:    ld l, e
; GBI-O3-NEXT:    ; kill: def $de
; GBI-O3-NEXT:    call (hl)
; GBI-O3-NEXT:    ret
  %1 = load ptr, ptr @untyped_fn_symbol
  %2 = call noundef i8 %1()
  ret i8 %2
}
