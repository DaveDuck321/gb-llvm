; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 3
; RUN: llc -mtriple=gb -verify-machineinstrs -O0 < %s \
; RUN:   | FileCheck %s -check-prefix=GBI-O0
; RUN: llc -mtriple=gb -verify-machineinstrs -O3 < %s \
; RUN:   | FileCheck %s -check-prefix=GBI-O3

@addr = global ptr null

define void @test_addresses() nounwind {
; GBI-O0-LABEL: test_addresses:
; GBI-O0:       ; %bb.0:
; GBI-O0-NEXT:    add sp, -6
; GBI-O0-NEXT:    ld bc, addr
; GBI-O0-NEXT:    ld hl, sp, 5
; GBI-O0-NEXT:    ld (hl), c
; GBI-O0-NEXT:    inc hl
; GBI-O0-NEXT:    ld (hl), b
; GBI-O0-NEXT:    ld d, b
; GBI-O0-NEXT:    ld e, c
; GBI-O0-NEXT:    ld a, e
; GBI-O0-NEXT:    ; kill: def $b killed $b killed $bc
; GBI-O0-NEXT:    ld hl, sp, 1
; GBI-O0-NEXT:    ld (hl), b
; GBI-O0-NEXT:    add $01
; GBI-O0-NEXT:    ld b, a
; GBI-O0-NEXT:    ld hl, sp, 1
; GBI-O0-NEXT:    ld a, (hl)
; GBI-O0-NEXT:    ld hl, sp, 2
; GBI-O0-NEXT:    ld (hl), b
; GBI-O0-NEXT:    adc $00
; GBI-O0-NEXT:    ld b, a
; GBI-O0-NEXT:    ld de, .Ltmp0
; GBI-O0-NEXT:    ld h, d
; GBI-O0-NEXT:    ld l, e
; GBI-O0-NEXT:    ld a, l
; GBI-O0-NEXT:    ld hl, sp, 5
; GBI-O0-NEXT:    ld c, (hl)
; GBI-O0-NEXT:    inc hl
; GBI-O0-NEXT:    ld h, (hl)
; GBI-O0-NEXT:    ld l, c
; GBI-O0-NEXT:    ld (hl), a
; GBI-O0-NEXT:    ld hl, sp, 2
; GBI-O0-NEXT:    ld l, (hl)
; GBI-O0-NEXT:    ld a, d
; GBI-O0-NEXT:    ; kill: def $l killed $l def $hl
; GBI-O0-NEXT:    ld h, b
; GBI-O0-NEXT:    ld c, h
; GBI-O0-NEXT:    ld b, l
; GBI-O0-NEXT:    ld hl, sp, 3
; GBI-O0-NEXT:    ld (hl), b
; GBI-O0-NEXT:    inc hl
; GBI-O0-NEXT:    ld (hl), c
; GBI-O0-NEXT:    ld l, b
; GBI-O0-NEXT:    ld h, c
; GBI-O0-NEXT:    ld (hl), a
; GBI-O0-NEXT:    ld hl, sp, 3
; GBI-O0-NEXT:    ldi a, (hl)
; GBI-O0-NEXT:    ld h, (hl)
; GBI-O0-NEXT:    ld l, a
; GBI-O0-NEXT:    ld a, (hl)
; GBI-O0-NEXT:    ld hl, sp, 5
; GBI-O0-NEXT:    ld b, (hl)
; GBI-O0-NEXT:    inc hl
; GBI-O0-NEXT:    ld h, (hl)
; GBI-O0-NEXT:    ld l, b
; GBI-O0-NEXT:    ld l, (hl)
; GBI-O0-NEXT:    ; kill: def $l killed $l def $hl
; GBI-O0-NEXT:    ld h, a
; GBI-O0-NEXT:    jp (hl)
; GBI-O0-NEXT:  .Ltmp0: ; Block address taken
; GBI-O0-NEXT:  .LBB0_1: ; %block
; GBI-O0-NEXT:    add sp, 6
; GBI-O0-NEXT:    ret
;
; GBI-O3-LABEL: test_addresses:
; GBI-O3:       ; %bb.0:
; GBI-O3-NEXT:    add sp, -4
; GBI-O3-NEXT:    ld bc, addr
; GBI-O3-NEXT:    ld hl, sp, 1
; GBI-O3-NEXT:    ld (hl), c
; GBI-O3-NEXT:    inc hl
; GBI-O3-NEXT:    ld (hl), b
; GBI-O3-NEXT:    ld a, c
; GBI-O3-NEXT:    add $01
; GBI-O3-NEXT:    ld e, a
; GBI-O3-NEXT:    ld a, b
; GBI-O3-NEXT:    adc $00
; GBI-O3-NEXT:    ld d, a
; GBI-O3-NEXT:    ld hl, .Ltmp0
; GBI-O3-NEXT:    ld b, h
; GBI-O3-NEXT:    ld a, l
; GBI-O3-NEXT:    ld hl, sp, 3
; GBI-O3-NEXT:    ldi (hl), a
; GBI-O3-NEXT:    ld (hl), b
; GBI-O3-NEXT:    ; kill: def $bc
; GBI-O3-NEXT:    ld h, b
; GBI-O3-NEXT:    ld l, c
; GBI-O3-NEXT:    push hl
; GBI-O3-NEXT:    ld hl, sp, 5
; GBI-O3-NEXT:    ld c, (hl)
; GBI-O3-NEXT:    inc hl
; GBI-O3-NEXT:    ld b, (hl)
; GBI-O3-NEXT:    pop hl
; GBI-O3-NEXT:    ld (hl), c
; GBI-O3-NEXT:    ld h, d
; GBI-O3-NEXT:    ld l, e
; GBI-O3-NEXT:    push hl
; GBI-O3-NEXT:    ld hl, sp, 5
; GBI-O3-NEXT:    ld c, (hl)
; GBI-O3-NEXT:    inc hl
; GBI-O3-NEXT:    ld b, (hl)
; GBI-O3-NEXT:    pop hl
; GBI-O3-NEXT:    ld (hl), b
; GBI-O3-NEXT:    ld d, (hl)
; GBI-O3-NEXT:    ld hl, sp, 1
; GBI-O3-NEXT:    ldi a, (hl)
; GBI-O3-NEXT:    ld h, (hl)
; GBI-O3-NEXT:    ld l, a
; GBI-O3-NEXT:    ld e, (hl)
; GBI-O3-NEXT:    ; kill: def $de
; GBI-O3-NEXT:    ld h, d
; GBI-O3-NEXT:    ld l, e
; GBI-O3-NEXT:    jp (hl)
; GBI-O3-NEXT:  .Ltmp0: ; Block address taken
; GBI-O3-NEXT:  .LBB0_1: ; %block
; GBI-O3-NEXT:    add sp, 4
; GBI-O3-NEXT:    ret
  store volatile ptr blockaddress(@test_addresses, %block), ptr @addr
  %val = load volatile ptr, ptr @addr
  indirectbr ptr %val, [label %block]

block:
  ret void
}


@val16 = local_unnamed_addr global i16 6546, align 8
define i16 @load_i16_global() nounwind {
; GBI-O0-LABEL: load_i16_global:
; GBI-O0:       ; %bb.0:
; GBI-O0-NEXT:    add sp, -4
; GBI-O0-NEXT:    ld bc, val16
; GBI-O0-NEXT:    ld hl, sp, 3
; GBI-O0-NEXT:    ld (hl), c
; GBI-O0-NEXT:    inc hl
; GBI-O0-NEXT:    ld (hl), b
; GBI-O0-NEXT:    ld d, b
; GBI-O0-NEXT:    ld e, c
; GBI-O0-NEXT:    ld a, e
; GBI-O0-NEXT:    ; kill: def $b killed $b killed $bc
; GBI-O0-NEXT:    ld hl, sp, 2
; GBI-O0-NEXT:    ld (hl), b
; GBI-O0-NEXT:    add $01
; GBI-O0-NEXT:    ld l, a
; GBI-O0-NEXT:    push hl
; GBI-O0-NEXT:    ld hl, sp, 4
; GBI-O0-NEXT:    ld a, (hl)
; GBI-O0-NEXT:    pop hl
; GBI-O0-NEXT:    adc $00
; GBI-O0-NEXT:    ; kill: def $l killed $l def $hl
; GBI-O0-NEXT:    ld h, a
; GBI-O0-NEXT:    ld a, (hl)
; GBI-O0-NEXT:    ld hl, sp, 3
; GBI-O0-NEXT:    ld b, (hl)
; GBI-O0-NEXT:    inc hl
; GBI-O0-NEXT:    ld h, (hl)
; GBI-O0-NEXT:    ld l, b
; GBI-O0-NEXT:    ld l, (hl)
; GBI-O0-NEXT:    ; kill: def $l killed $l def $hl
; GBI-O0-NEXT:    ld h, a
; GBI-O0-NEXT:    add sp, 4
; GBI-O0-NEXT:    ret
;
; GBI-O3-LABEL: load_i16_global:
; GBI-O3:       ; %bb.0:
; GBI-O3-NEXT:    ld bc, val16
; GBI-O3-NEXT:    ld a, c
; GBI-O3-NEXT:    add $01
; GBI-O3-NEXT:    ld l, a
; GBI-O3-NEXT:    ld a, b
; GBI-O3-NEXT:    adc $00
; GBI-O3-NEXT:    ld h, a
; GBI-O3-NEXT:    ld d, (hl)
; GBI-O3-NEXT:    ; kill: def $bc
; GBI-O3-NEXT:    ld h, b
; GBI-O3-NEXT:    ld l, c
; GBI-O3-NEXT:    ld e, (hl)
; GBI-O3-NEXT:    ; kill: def $de
; GBI-O3-NEXT:    ld h, d
; GBI-O3-NEXT:    ld l, e
; GBI-O3-NEXT:    ret
  %1 = load i16, ptr @val16
  ret i16 %1
}


@G = global i16 0
define i16 @lw_sw_global(i16 %a) nounwind {
; GBI-O0-LABEL: lw_sw_global:
; GBI-O0:       ; %bb.0:
; GBI-O0-NEXT:    add sp, -14
; GBI-O0-NEXT:    ; kill: def $hl
; GBI-O0-NEXT:    ld b, h
; GBI-O0-NEXT:    ld c, l
; GBI-O0-NEXT:    ld de, G
; GBI-O0-NEXT:    ld hl, sp, 9
; GBI-O0-NEXT:    ld (hl), e
; GBI-O0-NEXT:    inc hl
; GBI-O0-NEXT:    ld (hl), d
; GBI-O0-NEXT:    ld h, d
; GBI-O0-NEXT:    ld l, e
; GBI-O0-NEXT:    ld a, l
; GBI-O0-NEXT:    ld hl, sp, 1
; GBI-O0-NEXT:    ld (hl), a
; GBI-O0-NEXT:    ; kill: def $d killed $d killed $de
; GBI-O0-NEXT:    ld hl, sp, 2
; GBI-O0-NEXT:    ld (hl), d
; GBI-O0-NEXT:    add $12
; GBI-O0-NEXT:    ld d, a
; GBI-O0-NEXT:    ld hl, sp, 2
; GBI-O0-NEXT:    ld a, (hl)
; GBI-O0-NEXT:    ld hl, sp, 6
; GBI-O0-NEXT:    ld (hl), d
; GBI-O0-NEXT:    adc $00
; GBI-O0-NEXT:    ld e, a
; GBI-O0-NEXT:    ld hl, sp, 1
; GBI-O0-NEXT:    ld a, (hl)
; GBI-O0-NEXT:    add $01
; GBI-O0-NEXT:    ld l, a
; GBI-O0-NEXT:    push hl
; GBI-O0-NEXT:    ld hl, sp, 4
; GBI-O0-NEXT:    ld a, (hl)
; GBI-O0-NEXT:    pop hl
; GBI-O0-NEXT:    adc $00
; GBI-O0-NEXT:    ld d, a
; GBI-O0-NEXT:    push hl
; GBI-O0-NEXT:    ld hl, sp, 8
; GBI-O0-NEXT:    ld a, (hl)
; GBI-O0-NEXT:    pop hl
; GBI-O0-NEXT:    ; kill: def $l killed $l def $hl
; GBI-O0-NEXT:    ld h, d
; GBI-O0-NEXT:    push bc
; GBI-O0-NEXT:    ld c, h
; GBI-O0-NEXT:    ld b, l
; GBI-O0-NEXT:    ld hl, sp, 5
; GBI-O0-NEXT:    ld (hl), b
; GBI-O0-NEXT:    inc hl
; GBI-O0-NEXT:    ld (hl), c
; GBI-O0-NEXT:    ld l, b
; GBI-O0-NEXT:    ld h, c
; GBI-O0-NEXT:    pop bc
; GBI-O0-NEXT:    ld d, (hl)
; GBI-O0-NEXT:    push af
; GBI-O0-NEXT:    ld hl, sp, 11
; GBI-O0-NEXT:    ldi a, (hl)
; GBI-O0-NEXT:    ld h, (hl)
; GBI-O0-NEXT:    ld l, a
; GBI-O0-NEXT:    pop af
; GBI-O0-NEXT:    push hl
; GBI-O0-NEXT:    ld hl, sp, 7
; GBI-O0-NEXT:    ld (hl), d
; GBI-O0-NEXT:    pop hl
; GBI-O0-NEXT:    ld d, (hl)
; GBI-O0-NEXT:    ld hl, sp, 14
; GBI-O0-NEXT:    ld (hl), d
; GBI-O0-NEXT:    ld h, b
; GBI-O0-NEXT:    ld l, c
; GBI-O0-NEXT:    ld d, h
; GBI-O0-NEXT:    push af
; GBI-O0-NEXT:    ld hl, sp, 5
; GBI-O0-NEXT:    ldi a, (hl)
; GBI-O0-NEXT:    ld h, (hl)
; GBI-O0-NEXT:    ld l, a
; GBI-O0-NEXT:    pop af
; GBI-O0-NEXT:    ld (hl), d
; GBI-O0-NEXT:    add $01
; GBI-O0-NEXT:    ld l, a
; GBI-O0-NEXT:    ld a, e
; GBI-O0-NEXT:    adc $00
; GBI-O0-NEXT:    ; kill: def $l killed $l def $hl
; GBI-O0-NEXT:    ld h, a
; GBI-O0-NEXT:    push hl
; GBI-O0-NEXT:    ld hl, sp, 7
; GBI-O0-NEXT:    ld a, (hl)
; GBI-O0-NEXT:    pop hl
; GBI-O0-NEXT:    push bc
; GBI-O0-NEXT:    ld c, h
; GBI-O0-NEXT:    ld b, l
; GBI-O0-NEXT:    ld hl, sp, 9
; GBI-O0-NEXT:    ld (hl), b
; GBI-O0-NEXT:    inc hl
; GBI-O0-NEXT:    ld (hl), c
; GBI-O0-NEXT:    ld l, b
; GBI-O0-NEXT:    ld h, c
; GBI-O0-NEXT:    pop bc
; GBI-O0-NEXT:    ld h, (hl)
; GBI-O0-NEXT:    ld hl, sp, 6
; GBI-O0-NEXT:    ld l, (hl)
; GBI-O0-NEXT:    ; kill: def $l killed $l def $hl
; GBI-O0-NEXT:    ld h, e
; GBI-O0-NEXT:    push bc
; GBI-O0-NEXT:    ld c, h
; GBI-O0-NEXT:    ld b, l
; GBI-O0-NEXT:    ld hl, sp, 13
; GBI-O0-NEXT:    ld (hl), b
; GBI-O0-NEXT:    inc hl
; GBI-O0-NEXT:    ld (hl), c
; GBI-O0-NEXT:    ld l, b
; GBI-O0-NEXT:    ld h, c
; GBI-O0-NEXT:    pop bc
; GBI-O0-NEXT:    ld e, (hl)
; GBI-O0-NEXT:    ld hl, sp, 7
; GBI-O0-NEXT:    ld e, (hl)
; GBI-O0-NEXT:    inc hl
; GBI-O0-NEXT:    ld h, (hl)
; GBI-O0-NEXT:    ld l, e
; GBI-O0-NEXT:    ld (hl), d
; GBI-O0-NEXT:    ld hl, sp, 9
; GBI-O0-NEXT:    ld d, (hl)
; GBI-O0-NEXT:    inc hl
; GBI-O0-NEXT:    ld h, (hl)
; GBI-O0-NEXT:    ld l, d
; GBI-O0-NEXT:    ld b, c
; GBI-O0-NEXT:    ld (hl), b
; GBI-O0-NEXT:    ld hl, sp, 11
; GBI-O0-NEXT:    ld c, (hl)
; GBI-O0-NEXT:    inc hl
; GBI-O0-NEXT:    ld h, (hl)
; GBI-O0-NEXT:    ld l, c
; GBI-O0-NEXT:    ld (hl), b
; GBI-O0-NEXT:    ld hl, sp, 14
; GBI-O0-NEXT:    ld l, (hl)
; GBI-O0-NEXT:    ; kill: def $l killed $l def $hl
; GBI-O0-NEXT:    ld h, a
; GBI-O0-NEXT:    add sp, 14
; GBI-O0-NEXT:    ret
;
; GBI-O3-LABEL: lw_sw_global:
; GBI-O3:       ; %bb.0:
; GBI-O3-NEXT:    add sp, -8
; GBI-O3-NEXT:    ld b, h
; GBI-O3-NEXT:    ld a, l
; GBI-O3-NEXT:    ld hl, sp, 5
; GBI-O3-NEXT:    ldi (hl), a
; GBI-O3-NEXT:    ld (hl), b
; GBI-O3-NEXT:    ld bc, G
; GBI-O3-NEXT:    ld hl, sp, 3
; GBI-O3-NEXT:    ld (hl), c
; GBI-O3-NEXT:    inc hl
; GBI-O3-NEXT:    ld (hl), b
; GBI-O3-NEXT:    ld a, c
; GBI-O3-NEXT:    add $12
; GBI-O3-NEXT:    ld e, a
; GBI-O3-NEXT:    ld a, b
; GBI-O3-NEXT:    adc $00
; GBI-O3-NEXT:    ld d, a
; GBI-O3-NEXT:    ld hl, sp, 1
; GBI-O3-NEXT:    ld (hl), e
; GBI-O3-NEXT:    inc hl
; GBI-O3-NEXT:    ld (hl), d
; GBI-O3-NEXT:    ld a, c
; GBI-O3-NEXT:    add $01
; GBI-O3-NEXT:    ld e, a
; GBI-O3-NEXT:    ld a, b
; GBI-O3-NEXT:    adc $00
; GBI-O3-NEXT:    ld d, a
; GBI-O3-NEXT:    ld h, d
; GBI-O3-NEXT:    ld l, e
; GBI-O3-NEXT:    ld b, (hl)
; GBI-O3-NEXT:    ld hl, sp, 7
; GBI-O3-NEXT:    ld (hl), c
; GBI-O3-NEXT:    inc hl
; GBI-O3-NEXT:    ld (hl), b
; GBI-O3-NEXT:    ld hl, sp, 3
; GBI-O3-NEXT:    ldi a, (hl)
; GBI-O3-NEXT:    ld h, (hl)
; GBI-O3-NEXT:    ld l, a
; GBI-O3-NEXT:    push hl
; GBI-O3-NEXT:    ld hl, sp, 9
; GBI-O3-NEXT:    ld c, (hl)
; GBI-O3-NEXT:    inc hl
; GBI-O3-NEXT:    ld b, (hl)
; GBI-O3-NEXT:    pop hl
; GBI-O3-NEXT:    ld c, (hl)
; GBI-O3-NEXT:    ld hl, sp, 7
; GBI-O3-NEXT:    ld (hl), c
; GBI-O3-NEXT:    inc hl
; GBI-O3-NEXT:    ld (hl), b
; GBI-O3-NEXT:    ; kill: def $de
; GBI-O3-NEXT:    ld h, d
; GBI-O3-NEXT:    ld l, e
; GBI-O3-NEXT:    push hl
; GBI-O3-NEXT:    ld hl, sp, 7
; GBI-O3-NEXT:    ld e, (hl)
; GBI-O3-NEXT:    inc hl
; GBI-O3-NEXT:    ld d, (hl)
; GBI-O3-NEXT:    pop hl
; GBI-O3-NEXT:    ld (hl), d
; GBI-O3-NEXT:    ld hl, sp, 1
; GBI-O3-NEXT:    ld c, (hl)
; GBI-O3-NEXT:    inc hl
; GBI-O3-NEXT:    ld b, (hl)
; GBI-O3-NEXT:    ld a, c
; GBI-O3-NEXT:    add $01
; GBI-O3-NEXT:    ld e, a
; GBI-O3-NEXT:    ld a, b
; GBI-O3-NEXT:    adc $00
; GBI-O3-NEXT:    ld d, a
; GBI-O3-NEXT:    ld h, d
; GBI-O3-NEXT:    ld l, e
; GBI-O3-NEXT:    ld a, (hl)
; GBI-O3-NEXT:    ld h, b
; GBI-O3-NEXT:    ld l, c
; GBI-O3-NEXT:    ld a, (hl)
; GBI-O3-NEXT:    ; kill: def $de
; GBI-O3-NEXT:    ld h, d
; GBI-O3-NEXT:    ld l, e
; GBI-O3-NEXT:    push hl
; GBI-O3-NEXT:    ld hl, sp, 7
; GBI-O3-NEXT:    ld e, (hl)
; GBI-O3-NEXT:    inc hl
; GBI-O3-NEXT:    ld d, (hl)
; GBI-O3-NEXT:    pop hl
; GBI-O3-NEXT:    ld (hl), d
; GBI-O3-NEXT:    ld hl, sp, 3
; GBI-O3-NEXT:    ldi a, (hl)
; GBI-O3-NEXT:    ld h, (hl)
; GBI-O3-NEXT:    ld l, a
; GBI-O3-NEXT:    ld (hl), e
; GBI-O3-NEXT:    ; kill: def $bc
; GBI-O3-NEXT:    ld h, b
; GBI-O3-NEXT:    ld l, c
; GBI-O3-NEXT:    ld (hl), e
; GBI-O3-NEXT:    ld hl, sp, 7
; GBI-O3-NEXT:    ldi a, (hl)
; GBI-O3-NEXT:    ld h, (hl)
; GBI-O3-NEXT:    ld l, a
; GBI-O3-NEXT:    add sp, 8
; GBI-O3-NEXT:    ret
  %1 = load volatile i16, ptr @G
  store i16 %a, ptr @G
  %2 = getelementptr i16, ptr @G, i16 9
  %3 = load volatile i16, ptr %2
  store i16 %a, ptr %2
  ret i16 %1
}
